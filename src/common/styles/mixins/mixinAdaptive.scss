@use 'sass:math';

// Минимальная ширина страницы
$minWidth: 320;

// Минимальная высота страницы
$minHeight: 350; // 301
// Ширина полотна (макета)
$maxWidth: 1920;

// Высота въюпорта максимальная (макета)
// $maxHeight: 1080;
// Ширина ограничивающего контейнера (0 = нет ограничения)
$maxWidthContainer: 1050;

// Общий отступ у контейнера
// (30 = по 15px слева и справа, 0 = нет отступа)
$containerPadding: 30;

// Ширина страбатывания первого брейкпоинта
$containerWidth: $maxWidthContainer + $containerPadding;

// Адаптивное свойство
// Percent
@function percent($px, $from) {
  $result: math.div($px, $from) * 100%;
  @return $result;
}

// REM
@function rem($px) {
  $result: math.div($px, 14) + rem;
  @return $result;
}

// EM
@function em($px, $current: 14) {
  $result: math.div($px, $current) + em;
  @return $result;
}
@mixin adaptiveValueMaxHeight(
  $property,
  $startSize,
  $minSize,
  $widthFrom: $containerWidth,
  $widthTo: $minWidth,
  $maxHeight,
  $keepSize: 0
) {
  @if $widthFrom == $containerWidth and $maxWidthContainer == 0 {
    $widthFrom: $maxWidth;
  }

  // Брейк-поинты в EM
  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);

  // Формула плавающего значения
  // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  $flyValue: #{rem($yIntersection)}' + ' #{$slope * 100}vw;
  $propertyValue: #{'clamp(' rem($minSize) ',' $flyValue ',' rem($startSize) ')'};
  @if $widthFrom == $containerWidth or $widthFrom == $maxWidth or $keepSize == 1 or $keepSize == 2 {
    @media (min-width: $widthFromMedia) and (max-height: em($maxHeight)) {
      #{$property}: rem($startSize);
    }
  }
  @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) and (max-height: em($maxHeight)) {
    #{$property}: $propertyValue;
  }
  @if $widthTo == $minWidth or $keepSize == 1 or $keepSize == 3 {
    @media (max-width: $widthToMedia) and (max-height: em($maxHeight)) {
      #{$property}: rem($minSize);
    }
  }
}
@mixin adaptiveValue(
  $property,
  $startSize,
  $minSize,
  $widthFrom: $containerWidth,
  $widthTo: $minWidth,
  $keepSize: 0
) {
  @if $widthFrom == $containerWidth and $maxWidthContainer == 0 {
    $widthFrom: $maxWidth;
  }

  // Брейк-поинты в EM
  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);

  // Формула плавающего значения
  // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  $flyValue: #{rem($yIntersection)}' + ' #{$slope * 100}vw;
  $propertyValue: #{'clamp(' rem($minSize) ',' $flyValue ',' rem($startSize) ')'};

  // Если работаем с отрицательными значениями, например $startSize меньше $minSize
  @if $minSize > $startSize {
    $propertyValue: #{'clamp(' rem($startSize) ',' $flyValue ',' rem($minSize) ')'};
  }
  @if $widthFrom == $containerWidth or $widthFrom == $maxWidth or $keepSize == 1 or $keepSize == 2 {
    @media (min-width: $widthFromMedia) {
      #{$property}: rem($startSize);
    }
  }
  @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
    #{$property}: $propertyValue;
  }
  @if $widthTo == $minWidth or $keepSize == 1 or $keepSize == 3 {
    @media (max-width: $widthToMedia) {
      #{$property}: rem($minSize);
    }
  }
}
@mixin adaptiveValueImportant(
  $property,
  $startSize,
  $minSize,
  $widthFrom: $containerWidth,
  $widthTo: $minWidth,
  $keepSize: 0
) {
  @if $widthFrom == $containerWidth and $maxWidthContainer == 0 {
    $widthFrom: $maxWidth;
  }

  // Брейк-поинты в EM
  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);

  // Формула плавающего значения
  // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  $flyValue: #{rem($yIntersection)}' + ' #{$slope * 100}vw;
  $propertyValue: #{'clamp(' rem($minSize) ',' $flyValue ',' rem($startSize) ')'};

  // Если работаем с отрицательными значениями, например $startSize меньше $minSize
  @if $minSize > $startSize {
    $propertyValue: #{'clamp(' rem($startSize) ',' $flyValue ',' rem($minSize) ')'};
  }
  @if $widthFrom == $containerWidth or $widthFrom == $maxWidth or $keepSize == 1 or $keepSize == 2 {
    @media (min-width: $widthFromMedia) {
      #{$property}: rem($startSize) !important;
    }
  }
  @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
    #{$property}: $propertyValue !important;
  }
  @if $widthTo == $minWidth or $keepSize == 1 or $keepSize == 3 {
    @media (max-width: $widthToMedia) {
      #{$property}: rem($minSize) !important;
    }
  }
}
