{"version":3,"file":"static/js/285.79d78ad9.chunk.js","mappings":"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","sources":["webpack://cards/./src/common/components/BackToPacks/BackToPacks.module.scss?b64e","common/components/BackToPacks/BackToPacks.tsx","webpack://cards/./src/common/components/CustomInput/CustomInput.module.scss?ad3d","common/components/CustomInput/CustomInput.tsx","webpack://cards/./src/common/components/EditableSpan/EditableSpan.module.scss?b028","common/components/EditableSpan/EditableSpan.tsx","webpack://cards/./src/features/profile/Profile.module.scss?6070","features/profile/Profile.tsx","utils/base64Converter.ts","utils/validationSchema.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"backToPacks__linkPacks\":\"BackToPacks_backToPacks__linkPacks__ez79f\"};","import { Link } from 'react-router-dom'\r\n\r\nimport { PATH } from '../../../constants/routePaths.enum'\r\nimport { initialPacksQueryParams as initParams } from '../../../features/packs/packsSlice'\r\nimport { useAppSelector } from '../../../hooks/reduxHooks'\r\nimport { queryString } from '../../../utils/queryString'\r\nimport { useLocationNoUpdates } from '../../../utils/routerUtils'\r\n\r\nimport s from './BackToPacks.module.scss'\r\n\r\nexport const BackToPacks = () => {\r\n  const location = useLocationNoUpdates()\r\n  const packsQueryParams = useAppSelector(state => state.packs.queryParams)\r\n  const packsQueryString =\r\n    location.pathname === '/profile' ? '' : '?' + queryString(packsQueryParams, initParams)\r\n\r\n  return (\r\n    <Link className={s.backToPacks__linkPacks} to={PATH.PACKS + packsQueryString}>\r\n      Packs\r\n    </Link>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"CustomInput_input__4vgJw\"};","import { FC } from 'react'\r\n\r\nimport { TextField, TextFieldProps } from '@mui/material'\r\n\r\nimport s from './CustomInput.module.scss'\r\n\r\ntype CustomInputPropsType = TextFieldProps & {\r\n  value: string //Use our value to control input and also because value in MUI has unknown type\r\n}\r\n\r\nexport const CustomInput: FC<CustomInputPropsType> = ({ className, helperText, ...props }) => {\r\n  const finalClass = `${s.input} ${className ? className : ''}`\r\n  const errorText = helperText ? helperText : ' '\r\n\r\n  return (\r\n    <TextField\r\n      className={finalClass}\r\n      variant={props.variant || 'standard'}\r\n      type={props.type || 'text'}\r\n      fullWidth={props.fullWidth || true}\r\n      {...props}\r\n      helperText={errorText}\r\n    />\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"inputContainer\":\"EditableSpan_inputContainer__iMl27\",\"sendButton\":\"EditableSpan_sendButton__jZgQo\",\"userName\":\"EditableSpan_userName__kgfOm\",\"marker\":\"EditableSpan_marker__jy8nl\",\"errorButton\":\"EditableSpan_errorButton__JDJG1\",\"animateErrorButton\":\"EditableSpan_animateErrorButton__3smvd\"};","import { memo, useState, MouseEvent, ChangeEvent, KeyboardEvent, FC } from 'react'\r\n\r\nimport { useAppSelector } from '../../../hooks/reduxHooks'\r\nimport { CustomInput } from '../CustomInput/CustomInput'\r\n\r\nimport s from './EditableSpan.module.scss'\r\n\r\ntype EditableSpanType = {\r\n  changeName: (name: string) => void\r\n}\r\n\r\nexport const EditableSpan: FC<EditableSpanType> = memo(({ changeName }) => {\r\n  const name = useAppSelector(state => state.profile.userData.name)\r\n  const [inputValue, setInputValue] = useState(name ? name : '')\r\n  const [isInEditMode, setIsInEditMode] = useState(false)\r\n  const [errorEmptyField, setErrorEmptyField] = useState(false)\r\n  const [errorStyleButton, setErrorStyleButton] = useState('')\r\n\r\n  const handleAnimationEndError = () => setErrorStyleButton('')\r\n\r\n  const handleErrorSetNewName = () => {\r\n    if (errorEmptyField) {\r\n      setErrorStyleButton(s.errorButton)\r\n    }\r\n  }\r\n\r\n  const handleEditMode = () => {\r\n    setInputValue(inputValue.trim())\r\n    setIsInEditMode(true)\r\n  }\r\n\r\n  const handleSetNewName = (e?: MouseEvent<HTMLDivElement>) => {\r\n    e?.preventDefault()\r\n    if (inputValue.trim() === '') {\r\n      setErrorEmptyField(true)\r\n      setErrorStyleButton(s.errorButton)\r\n\r\n      return\r\n    } else {\r\n      setIsInEditMode(false)\r\n    }\r\n\r\n    if (inputValue.trim() !== name) {\r\n      changeName(inputValue.trim())\r\n    }\r\n  }\r\n\r\n  const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.currentTarget.value.trim() !== '') {\r\n      setErrorEmptyField(false)\r\n    }\r\n\r\n    setInputValue(e.currentTarget.value)\r\n  }\r\n\r\n  const onBlurInput = () => {\r\n    setInputValue(name ? name : '')\r\n    setIsInEditMode(false)\r\n    setErrorEmptyField(false)\r\n  }\r\n\r\n  const onKeyDownInputHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      handleSetNewName()\r\n    }\r\n\r\n    if (e.key === 'Escape') {\r\n      onBlurInput()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isInEditMode ? (\r\n        <div className={s.inputContainer}>\r\n          <CustomInput\r\n            value={inputValue}\r\n            onBlur={onBlurInput}\r\n            onKeyDown={onKeyDownInputHandler}\r\n            onChange={onChangeInputHandler}\r\n            autoFocus={true}\r\n            autoComplete={'new-password'}\r\n            error={errorEmptyField}\r\n            InputProps={{\r\n              inputProps: { style: { textAlign: 'center' } },\r\n            }}\r\n          />\r\n          <div\r\n            className={`${s.sendButton} ${errorStyleButton}`}\r\n            onMouseDown={handleSetNewName}\r\n            onClick={handleErrorSetNewName}\r\n            onAnimationEnd={handleAnimationEndError}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <span className={s.userName}>{name}</span>\r\n          <div className={s.marker} onClick={handleEditMode} />\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n})\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profileContainer\":\"Profile_profileContainer__TQBsh\",\"profile__content\":\"Profile_profile__content__ysyQW\",\"profile__arrow\":\"Profile_profile__arrow__Ib2KW\",\"profile__title\":\"Profile_profile__title__YLrQj\",\"profile__form\":\"Profile_profile__form__9YK8q\",\"profile__avatarBlock\":\"Profile_profile__avatarBlock__HYY4r\",\"profile__pic\":\"Profile_profile__pic__749ru\",\"profile__img\":\"Profile_profile__img__dyT94\",\"profile__avatarIcon\":\"Profile_profile__avatarIcon__APPKr\",\"profile__userName\":\"Profile_profile__userName__7xtU4\",\"profile__marker\":\"Profile_profile__marker__SJMxU\",\"profile__userEmail\":\"Profile_profile__userEmail__UFRFm\",\"profile__button\":\"Profile_profile__button__6m94J\",\"profile__buttonIcon\":\"Profile_profile__buttonIcon__gSWb9\"};","import { ChangeEvent, useCallback, useEffect } from 'react'\r\n\r\nimport { setAppAlertMessage } from '../../app/appSlice'\r\nimport avatarLocal from '../../assets/img/avatar.jpg'\r\nimport { BackToPacks } from '../../common/components/BackToPacks/BackToPacks'\r\nimport { CustomButton } from '../../common/components/CustomButton/CustomButton'\r\nimport { EditableSpan } from '../../common/components/EditableSpan/EditableSpan'\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/reduxHooks'\r\nimport { base64Converter } from '../../utils/base64Converter'\r\nimport { validateImage } from '../../utils/validationSchema'\r\nimport { logOutTC } from '../auth/authSlice'\r\nimport { clearPacksQueryParams } from '../packs/packsSlice'\r\n\r\nimport s from './Profile.module.scss'\r\nimport { updateUserDataTC } from './profileSlice'\r\n\r\nexport const Profile = () => {\r\n  const dispatch = useAppDispatch()\r\n  const email = useAppSelector(state => state.profile.userData.email)\r\n  const avatar = useAppSelector(state => state.profile.userData.avatar)\r\n\r\n  const handleOnLogOut = () => dispatch(logOutTC())\r\n\r\n  const handleChangeUserName = useCallback(\r\n    (newName: string) => {\r\n      dispatch(updateUserDataTC({ name: newName }))\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(clearPacksQueryParams())\r\n    }\r\n  }, [])\r\n\r\n  const handleUploadAvatar = async (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (!e.target.files) return\r\n    const base64 = (await base64Converter(e)) as string\r\n    const validateImageData = {\r\n      size: e.target.files[0].size || 0,\r\n      type: e.target.files[0].type || '',\r\n      isImageExist: !!base64,\r\n    }\r\n    const errorMessage = validateImage(validateImageData).deckCover\r\n\r\n    if (errorMessage) {\r\n      dispatch(setAppAlertMessage({ messageText: errorMessage, messageType: 'error' }))\r\n    } else {\r\n      dispatch(updateUserDataTC({ avatar: base64 }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={s.profileContainer}>\r\n      <BackToPacks />\r\n      <div className={s.profile__content}>\r\n        <h2 className={s.profile__title}>Personal information</h2>\r\n        <div className={s.profile__avatarBlock}>\r\n          <div className={s.profile__pic}>\r\n            <img className={s.profile__img} src={avatar || avatarLocal} alt=\"avatar\" />\r\n          </div>\r\n          <label>\r\n            <input\r\n              type=\"file\"\r\n              onChange={handleUploadAvatar}\r\n              style={{ display: 'none' }}\r\n              accept={'image/*'}\r\n            />\r\n            <div className={s.profile__avatarIcon} />\r\n          </label>\r\n        </div>\r\n        <div className={s.profile__userName}>\r\n          <EditableSpan changeName={handleChangeUserName} />\r\n        </div>\r\n        <p className={s.profile__userEmail}>{email}</p>\r\n        <CustomButton className={s.profile__button} onClick={handleOnLogOut}>\r\n          <p className={s.profile__buttonIcon}>Log out</p>\r\n        </CustomButton>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { ChangeEvent, DragEvent } from 'react'\r\n\r\nexport const base64Converter = async (e: any) => {\r\n  const files = e.target.files || e.dataTransfer.files\r\n\r\n  if (files && files.length && files[0].size < 500000 && files[0].type.includes('image')) {\r\n    const reader = new FileReader()\r\n\r\n    reader.readAsDataURL(files[0])\r\n    const data = await new Promise((resolve, reject) => {\r\n      reader.onload = () => resolve(reader.result)\r\n      reader.onerror = error => reject(error)\r\n    })\r\n\r\n    return data\r\n  }\r\n}\r\n","import * as yup from 'yup'\r\n\r\nconst name = yup.string().required('Required')\r\nconst avatar = name\r\nconst email = yup.string().email('Enter a valid email').required('Email is required')\r\nconst password = yup\r\n  .string()\r\n  .min(8, 'Password must contain at least 8 characters')\r\n  .required('Enter your password')\r\nconst confirmPassword = yup\r\n  .string()\r\n  .oneOf([yup.ref('password')], 'Password does not match')\r\n  .required('Confirm your password')\r\nconst rememberMe = yup.boolean()\r\nconst question = yup\r\n  .string()\r\n  .max(100, 'Question should be less then 100 characters')\r\n  .required('Question is required')\r\nconst answer = yup\r\n  .string()\r\n  .max(100, 'Answer should be less then 100 characters')\r\n  .required('Answer is required')\r\nconst packName = yup\r\n  .string()\r\n  .max(100, 'Name should be less then 100 characters')\r\n  .required('Pack name is required')\r\n\r\nexport const validationSchemaLogin = yup.object({ email, password, rememberMe })\r\n\r\nexport const validationSchemaRegistration = yup.object({ email, password, confirmPassword })\r\n\r\nexport const validationSchemaProfile = yup.object({ name, avatar })\r\n\r\nexport const validationSchemaNewPassword = yup.object({ password })\r\n\r\nexport const validationSchemaForgotPassword = yup.object({ email })\r\n\r\nexport const validationSchemaNewCardText = yup.object({ question, answer })\r\n\r\nexport const validationSchemaNewPackText = yup.object({ name: packName })\r\n\r\nexport const validateImage = (imgData: ValidateImageType) => {\r\n  const formats = ['image/jpeg', 'image/png', 'image/jpg', 'image/gif', 'image/webp']\r\n  const error: { questionImg?: string; deckCover?: string } = {}\r\n\r\n  if (imgData.selectedItem && !imgData.size && !imgData.isImageExist) {\r\n    error.questionImg = 'Question image is required'\r\n\r\n    return error\r\n  }\r\n\r\n  if (imgData.type && !new RegExp(imgData.type, 'gi').test(formats.join(','))) {\r\n    error.questionImg = 'Unsupported file format'\r\n    error.deckCover = 'Unsupported file format'\r\n\r\n    return error\r\n  }\r\n\r\n  if (imgData.size && imgData.size > 500000) {\r\n    error.questionImg = 'File size is more than 0.5MB'\r\n    error.deckCover = 'File size is more than 0.5MB'\r\n\r\n    return error\r\n  }\r\n\r\n  return error\r\n}\r\n\r\ntype ValidateImageType = {\r\n  size: number\r\n  type: string\r\n  selectedItem?: boolean\r\n  isImageExist: boolean\r\n}\r\n"],"names":["BackToPacks","location","useLocationNoUpdates","packsQueryParams","useAppSelector","state","packs","queryParams","packsQueryString","pathname","queryString","initParams","className","s","to","PATH","CustomInput","helperText","props","finalClass","errorText","TextField","variant","type","fullWidth","EditableSpan","memo","changeName","name","profile","userData","useState","inputValue","setInputValue","isInEditMode","setIsInEditMode","errorEmptyField","setErrorEmptyField","errorStyleButton","setErrorStyleButton","handleSetNewName","e","preventDefault","trim","onBlurInput","value","onBlur","onKeyDown","key","onChange","currentTarget","autoFocus","autoComplete","error","InputProps","inputProps","style","textAlign","onMouseDown","onClick","onAnimationEnd","Profile","dispatch","useAppDispatch","email","avatar","handleChangeUserName","useCallback","newName","updateUserDataTC","useEffect","clearPacksQueryParams","handleUploadAvatar","target","files","base64Converter","base64","validateImageData","size","isImageExist","errorMessage","validateImage","deckCover","setAppAlertMessage","messageText","messageType","src","avatarLocal","alt","display","accept","CustomButton","logOutTC","dataTransfer","length","includes","reader","FileReader","readAsDataURL","Promise","resolve","reject","onload","result","onerror","data","yup","required","password","min","confirmPassword","oneOf","rememberMe","question","max","answer","packName","validationSchemaLogin","validationSchemaRegistration","validationSchemaNewPassword","validationSchemaForgotPassword","validationSchemaNewCardText","validationSchemaNewPackText","imgData","selectedItem","RegExp","test","join","questionImg"],"sourceRoot":""}