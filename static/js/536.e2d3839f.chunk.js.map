{"version":3,"file":"static/js/536.e2d3839f.chunk.js","mappings":"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","sources":["webpack://cards/./src/features/cards/Cards.module.scss?c16b","webpack://cards/./src/features/cards/CardsTable/CardsTable.module.scss?0e88","webpack://cards/./src/features/cards/Modals/DeleteCard/DeleteCard.module.scss?527d","features/cards/Modals/DeleteCard/DeleteCard.tsx","webpack://cards/./src/features/cards/Modals/AddCard/AddCard.module.scss?2d64","features/cards/Modals/EditCard/EditCard.tsx","webpack://cards/./src/features/cards/CardActionsMenu/CardActionsMenu.module.scss?18cc","features/cards/CardActionsMenu/CardActionsMenuList/CardActionsMenuList.tsx","features/cards/CardActionsMenu/CardActionsMenu.tsx","webpack://cards/./src/features/cards/CardsTable/CardsTableBody/CardsTableBody.module.scss?211e","features/cards/CardsTable/CardsTableBody/CardsTableBody.tsx","features/cards/CardsTable/CardsTable.tsx","features/cards/Modals/AddCard/PictureForm.tsx","features/cards/Modals/AddCard/TextForm.tsx","features/cards/Modals/AddCard/AddCard.tsx","features/cards/Cards.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cardsContainer\":\"Cards_cardsContainer__aYsFI\",\"cards__controlBlock\":\"Cards_cards__controlBlock__qTx-z\",\"cards__table\":\"Cards_cards__table__sn9Sz\",\"imgContainer\":\"Cards_imgContainer__b9F-k\",\"img\":\"Cards_img__cGe1w\"};","// extracted by mini-css-extract-plugin\nexport default {\"tableCards\":\"CardsTable_tableCards__2IL8g\",\"cards__emptyBlock\":\"CardsTable_cards__emptyBlock__Zf3yi\",\"cards__emptyTitle\":\"CardsTable_cards__emptyTitle__2rNiu\",\"addButton\":\"CardsTable_addButton__qsLXM\"};","// extracted by mini-css-extract-plugin\nexport default {\"Message\":\"DeleteCard_Message__Tnij-\",\"ButtonContainer\":\"DeleteCard_ButtonContainer__C0jXa\"};","import { FC } from 'react'\r\n\r\nimport Button from '@mui/material/Button'\r\n\r\nimport { useAppDispatch } from '../../../../hooks/reduxHooks'\r\nimport { deleteCardTC } from '../../cardsSlice'\r\n\r\nimport s from './DeleteCard.module.scss'\r\n\r\ntype DeleteCardType = {\r\n  id: string\r\n  closeModal: () => void\r\n}\r\n\r\nexport const DeleteCard: FC<DeleteCardType> = ({ id, closeModal }) => {\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleDeletePack = async () => {\r\n    await dispatch(deleteCardTC(id))\r\n    closeModal()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p className={s.Message}>\r\n        Are you sure you want to delete current Card?\r\n        <br />\r\n      </p>\r\n      <div className={s.ButtonContainer}>\r\n        <Button onClick={closeModal} type={'button'} variant=\"outlined\">\r\n          Cancel\r\n        </Button>\r\n        <Button type={'button'} variant=\"contained\" onClick={handleDeletePack} color={'error'}>\r\n          Delete\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"CardContainer\":\"AddCard_CardContainer__mo31j\",\"CardTypeContainer\":\"AddCard_CardTypeContainer__TFB0P\",\"CardTypeContainer__title\":\"AddCard_CardTypeContainer__title__N71cw\",\"Type\":\"AddCard_Type__PF-ag\",\"AddTextCard\":\"AddCard_AddTextCard__681nC\",\"FormControl\":\"AddCard_FormControl__62WV6\",\"Error\":\"AddCard_Error__6K5zC\",\"Error__active\":\"AddCard_Error__active__kkSbF\",\"Submit\":\"AddCard_Submit__g8GPA\"};","import { ChangeEvent, FC, useState } from 'react'\r\n\r\nimport Button from '@mui/material/Button'\r\nimport TextField from '@mui/material/TextField'\r\nimport { useFormik } from 'formik'\r\n\r\nimport cover from '../../../../assets/img/cover.png'\r\nimport cs from '../../../../common/styles/modalStyles/ModalStyles.module.scss'\r\nimport { useAppDispatch } from '../../../../hooks/reduxHooks'\r\nimport { updateCardTC, UpdateCardType } from '../../cardsSlice'\r\nimport s from '../AddCard/AddCard.module.scss'\r\n\r\ntype AddCardTextFormType = {\r\n  closeModal: (state: boolean) => void\r\n  cardsData: UpdateCardType\r\n}\r\n\r\ntype FormikErrorType = {\r\n  question?: string\r\n  answer?: string\r\n}\r\n\r\nexport const EditCard: FC<AddCardTextFormType> = ({ closeModal, cardsData }) => {\r\n  const dispatch = useAppDispatch()\r\n  const [image, setImage] = useState(cardsData.questionImg)\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      question: cardsData.question,\r\n      answer: cardsData.answer,\r\n    },\r\n    validate: values => {\r\n      const errors: FormikErrorType = {}\r\n\r\n      if (!values.question) {\r\n        errors.question = 'Question is required'\r\n      }\r\n      if (!values.answer) {\r\n        errors.answer = 'Answer is required'\r\n      }\r\n\r\n      return errors\r\n    },\r\n    onSubmit: async values => {\r\n      const { question, answer } = values\r\n\r\n      if (\r\n        cardsData.question !== question ||\r\n        cardsData.answer !== answer ||\r\n        cardsData.questionImg !== image\r\n      ) {\r\n        debugger\r\n        console.log('Check: ', cardsData.questionImg === image)\r\n        await dispatch(updateCardTC({ id: cardsData.id, question, answer, questionImg: image }))\r\n      }\r\n      closeModal(false)\r\n      formik.resetForm()\r\n    },\r\n  })\r\n\r\n  const handleCloseModal = () => closeModal(false)\r\n\r\n  //to be refactored as util function\r\n  const handleCoverInput = async (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files.length) {\r\n      const file = e.target.files[0]\r\n\r\n      if (file.size < 4000000 && file.type.includes('image')) {\r\n        const reader = new FileReader()\r\n\r\n        reader.onload = async () => {\r\n          const file64 = reader.result as string\r\n\r\n          await setImage(file64)\r\n        }\r\n\r\n        reader.readAsDataURL(file)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={s.AddTextCard}>\r\n      <h3>Edit Card</h3>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        {image ? (\r\n          <>\r\n            <div className={cs.ImageContainer}>\r\n              <img\r\n                src={image}\r\n                alt=\"cover\"\r\n                className={cs.Image}\r\n                onError={({ currentTarget }) => {\r\n                  currentTarget.onerror = null // prevents looping\r\n                  currentTarget.src = cover\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <label>\r\n              <input type=\"file\" hidden onChange={handleCoverInput} accept={'image/*'} />\r\n              <Button variant={'contained'} className={cs.FormFields} component={'span'}>\r\n                Upload Question Picture\r\n              </Button>\r\n            </label>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <TextField\r\n              className={s.FormControl}\r\n              margin=\"dense\"\r\n              size={'small'}\r\n              label={'question'}\r\n              {...formik.getFieldProps('question')}\r\n            />\r\n            {\r\n              <div\r\n                className={\r\n                  formik.touched.question && formik.errors.question\r\n                    ? `${s.Error} ${s.Error__active}`\r\n                    : `${s.Error}`\r\n                }\r\n              >\r\n                {formik.errors.question}\r\n              </div>\r\n            }\r\n          </>\r\n        )}\r\n        <TextField\r\n          className={s.FormControl}\r\n          margin=\"dense\"\r\n          size={'small'}\r\n          label={'answer'}\r\n          {...formik.getFieldProps('answer')}\r\n        />\r\n        {\r\n          <div\r\n            className={\r\n              formik.touched.answer && formik.errors.answer\r\n                ? `${s.Error} ${s.Error__active}`\r\n                : `${s.Error}`\r\n            }\r\n          >\r\n            {formik.errors.answer}\r\n          </div>\r\n        }\r\n        <div className={s.Submit}>\r\n          <Button variant=\"outlined\" onClick={handleCloseModal} type={'button'}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            type={'submit'}\r\n            variant=\"contained\"\r\n            disabled={!formik.errors.answer && !formik.errors.question ? false : true}\r\n          >\r\n            Edit\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContainer\":\"CardActionsMenu_menuContainer__78870\",\"menu\":\"CardActionsMenu_menu__aneCs\",\"openMenuLeft\":\"CardActionsMenu_openMenuLeft__SOq5z\",\"animateWidth\":\"CardActionsMenu_animateWidth__38a0f\",\"menuItem\":\"CardActionsMenu_menuItem__5n86X\",\"openToLeft\":\"CardActionsMenu_openToLeft__kGamp\",\"portalBgColor\":\"CardActionsMenu_portalBgColor__rOWqi\",\"modalsContainer\":\"CardActionsMenu_modalsContainer__V6aMg\"};","import { FC, MutableRefObject, useRef } from 'react'\r\n\r\nimport { useOnClickOutside } from '../../../../hooks/useOnClickOutside'\r\nimport s from '../CardActionsMenu.module.scss'\r\n\r\ntype CardActionsMenuListType = {\r\n  handleEdit: () => void\r\n  handleDelete: () => void\r\n  closeMenu: () => void\r\n}\r\n\r\nexport const CardActionsMenuList: FC<CardActionsMenuListType> = ({\r\n  handleEdit,\r\n  handleDelete,\r\n  closeMenu,\r\n}) => {\r\n  const listRef = useRef() as MutableRefObject<HTMLUListElement>\r\n\r\n  useOnClickOutside(listRef, closeMenu)\r\n\r\n  return (\r\n    <ul ref={listRef} className={s.menu} onClick={closeMenu}>\r\n      <li className={s.menuItem} onClick={handleEdit}></li>\r\n      <li className={s.menuItem} onClick={handleDelete}></li>\r\n    </ul>\r\n  )\r\n}\r\n","import { FC, useState } from 'react'\r\n\r\nimport { Portal } from '@mui/material'\r\n\r\nimport { DeleteCard } from '../Modals/DeleteCard/DeleteCard'\r\nimport { EditCard } from '../Modals/EditCard/EditCard'\r\n\r\nimport s from './CardActionsMenu.module.scss'\r\nimport { CardActionsMenuList } from './CardActionsMenuList/CardActionsMenuList'\r\n\r\ntype CardActionsMenuType = {\r\n  cardID: string\r\n  answer: string\r\n  question: string\r\n  questionImg: string\r\n}\r\n\r\nexport const CardActionsMenu: FC<CardActionsMenuType> = ({\r\n  cardID,\r\n  answer,\r\n  question,\r\n  questionImg,\r\n}) => {\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false)\r\n  const menuSheet = isMenuOpen ? s.openMenuLeft : ''\r\n  const [openModals, setOpenModals] = useState<number[]>([0, 0])\r\n  const showModals = openModals.reduce((a, b) => a + b, 0)\r\n  const sendData = {\r\n    id: cardID,\r\n    answer: answer,\r\n    question: question,\r\n    questionImg: questionImg,\r\n  }\r\n  const portalStyleBg = showModals ? s.portalBgColor : ''\r\n\r\n  const handleToogleMenu = () => setIsMenuOpen(!isMenuOpen)\r\n\r\n  const handleClose = () => {\r\n    setOpenModals([0, 0])\r\n    document.body.style.overflow = 'unset'\r\n  }\r\n\r\n  const handleEdit = () => {\r\n    setOpenModals([1, 0])\r\n    document.body.style.overflow = 'hidden'\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    setOpenModals([0, 1])\r\n    document.body.style.overflow = 'hidden'\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Portal>\r\n        <div className={portalStyleBg} onClick={handleClose}></div>\r\n        {!!showModals && (\r\n          <div className={s.modalsContainer}>\r\n            {!!openModals[0] && <EditCard cardsData={sendData} closeModal={handleClose} />}\r\n            {!!openModals[1] && <DeleteCard id={cardID} closeModal={handleClose} />}\r\n          </div>\r\n        )}\r\n      </Portal>\r\n\r\n      <div className={`${s.menuContainer} ${menuSheet}`} onClick={handleToogleMenu}>\r\n        {isMenuOpen && (\r\n          <CardActionsMenuList\r\n            handleEdit={handleEdit}\r\n            handleDelete={handleDelete}\r\n            closeMenu={handleToogleMenu}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"packImageWrapper\":\"CardsTableBody_packImageWrapper__jTYgK\",\"packName\":\"CardsTableBody_packName__+98Gt\",\"packNameAdaptive\":\"CardsTableBody_packNameAdaptive__wntVX\",\"packImage\":\"CardsTableBody_packImage__jIYca\",\"tablePacks__body\":\"CardsTableBody_tablePacks__body__vaIv+\",\"tablePacks__bodyRow\":\"CardsTableBody_tablePacks__bodyRow__a2-l5\",\"tablePacks__bodyCell\":\"CardsTableBody_tablePacks__bodyCell__zSru2\",\"tablePacks__bodyCellTitle\":\"CardsTableBody_tablePacks__bodyCellTitle__+pg2X\",\"tablePacks__bodyCellContent\":\"CardsTableBody_tablePacks__bodyCellContent__NUIeh\",\"linkToLearnActive\":\"CardsTableBody_linkToLearnActive__qtib5\",\"linkToLearnDisabled\":\"CardsTableBody_linkToLearnDisabled__n027o\"};","import { FC } from 'react'\r\n\r\nimport Rating from '@mui/material/Rating'\r\nimport dayjs from 'dayjs'\r\nimport isBase64 from 'is-base64'\r\n\r\nimport { RequestStatusType } from '../../../../app/appSlice'\r\nimport { TableHeadType } from '../../../../common/components/CustomTableHead/CustomTableHead'\r\nimport { PATH } from '../../../../constants/routePaths.enum'\r\nimport { useAppSelector } from '../../../../hooks/reduxHooks'\r\nimport { useNavigateNoUpdates } from '../../../../utils/routerUtils'\r\nimport { CardActionsMenu } from '../../CardActionsMenu/CardActionsMenu'\r\nimport { AppCardType } from '../../cardsSlice'\r\nimport { CardsOrderByType } from '../CardsTable'\r\n\r\nimport s from './CardsTableBody.module.scss'\r\n\r\ntype CardsTableBodyType = {\r\n  heads: TableHeadType<CardsOrderByType>[]\r\n  isMine: boolean\r\n}\r\n\r\nexport const CardsTableBody: FC<CardsTableBodyType> = ({ heads, isMine }) => {\r\n  const tableData = useAppSelector<AppCardType[]>(state => state.cards.tableData)\r\n  const navigate = useNavigateNoUpdates()\r\n\r\n  const handleOpenCard = (id: string, packId: string, requestStatus: RequestStatusType) => {\r\n    if (requestStatus === 'loading') return\r\n    navigate(PATH.LEARN + `/${packId}`, { state: { cardId: id } })\r\n  }\r\n\r\n  return (\r\n    <tbody className={s.tablePacks__body}>\r\n      {tableData.map(row => {\r\n        return (\r\n          <tr key={row._id} className={s.tablePacks__bodyRow}>\r\n            {heads.map((h, i) => {\r\n              const validImg = isBase64(row.questionImg, { mimeRequired: true })\r\n\r\n              return (\r\n                <td\r\n                  className={s.tablePacks__bodyCell}\r\n                  scope=\"row\"\r\n                  key={h.id}\r\n                  onClick={() => handleOpenCard(row._id, row.cardsPack_id, row.requestStatus)}\r\n                >\r\n                  <div className={s.tablePacks__bodyCellContent}>\r\n                    <div className={s.tablePacks__bodyCellTitle}>\r\n                      {i === 0 ? row[h.id] : h.label}\r\n                    </div>\r\n\r\n                    {h.id === 'question' && validImg && (\r\n                      <div className={s.packImageWrapper}>\r\n                        <img src={row.questionImg} alt=\"deckCover\" className={s.packImage} />\r\n                      </div>\r\n                    )}\r\n\r\n                    {h.id === 'grade' ? (\r\n                      <Rating value={row[h.id]} readOnly />\r\n                    ) : (\r\n                      <p\r\n                        className={`${s.packNameAdaptive} ${\r\n                          h.id === 'question' && validImg ? s.packName : ''\r\n                        }`}\r\n                      >\r\n                        {h.id === 'updated' ? dayjs(row[h.id]).format('DD.MM.YYYY') : row[h.id]}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                </td>\r\n              )\r\n            })}\r\n            <td className={s.tablePacks__bodyCell}>\r\n              {isMine && (\r\n                <CardActionsMenu\r\n                  cardID={row._id}\r\n                  answer={row.answer}\r\n                  question={row.question}\r\n                  questionImg={row.questionImg}\r\n                />\r\n              )}\r\n            </td>\r\n          </tr>\r\n        )\r\n      })}\r\n    </tbody>\r\n  )\r\n}\r\n","import { FC, memo } from 'react'\r\n\r\nimport { RequestStatusType } from '../../../app/appSlice'\r\nimport { CustomButton } from '../../../common/components/CustomButton/CustomButton'\r\nimport { TableBodySkeleton } from '../../../common/components/CustomSkeletons/TableBodySkeleton/TableBodySkeleton'\r\nimport {\r\n  CustomTableHead,\r\n  TableHeadType,\r\n} from '../../../common/components/CustomTableHead/CustomTableHead'\r\nimport { LoadingProgress } from '../../../common/components/LoadingProgress/LoadingProgress'\r\nimport { useAppSelector } from '../../../hooks/reduxHooks'\r\n\r\nimport s from './CardsTable.module.scss'\r\nimport { CardsTableBody } from './CardsTableBody/CardsTableBody'\r\n\r\nexport type CardsOrderByType = 'question' | 'answer' | 'updated' | 'grade'\r\n\r\nconst heads: TableHeadType<CardsOrderByType>[] = [\r\n  { id: 'question', label: 'Question' },\r\n  { id: 'answer', label: 'Answer' },\r\n  { id: 'grade', label: 'Grade' },\r\n  { id: 'updated', label: 'Last updated' },\r\n]\r\n\r\ntype CardsTablePropsType = {\r\n  isMine: boolean\r\n  showButton: boolean\r\n  handleTitleButton: () => void\r\n}\r\n\r\nexport const CardsTable: FC<CardsTablePropsType> = memo(\r\n  ({ isMine, showButton, handleTitleButton }) => {\r\n    const status = useAppSelector<RequestStatusType>(state => state.cards.status)\r\n    const isTableNotEmpty = useAppSelector(state => state.cards.cardsData.cardsTotalCount)\r\n    const pageCount = useAppSelector(state => state.cards.queryParams.pageCount)\r\n\r\n    return (\r\n      <>\r\n        {isTableNotEmpty ? (\r\n          <table className={s.tableCards}>\r\n            <CustomTableHead heads={heads} forCards withActions={isMine} />\r\n            {status === 'loading' ? (\r\n              <TableBodySkeleton\r\n                columnsCount={heads.length}\r\n                rowsCount={pageCount}\r\n                withActions={isMine}\r\n              />\r\n            ) : (\r\n              <CardsTableBody heads={heads} isMine={isMine} />\r\n            )}\r\n          </table>\r\n        ) : (\r\n          <>\r\n            {status === 'loading' ? (\r\n              <LoadingProgress />\r\n            ) : (\r\n              <div className={s.cards__emptyBlock}>\r\n                <h3 className={s.cards__emptyTitle}>\r\n                  No cards found. <br />\r\n                  {isMine && !showButton ? 'Click add new card to fill this pack' : ''}\r\n                </h3>\r\n\r\n                {isMine && !showButton && (\r\n                  <CustomButton className={s.addButton} onClick={handleTitleButton}>\r\n                    <p>Add new card</p>\r\n                  </CustomButton>\r\n                )}\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n)\r\n","import { ChangeEvent, FC, useState } from 'react'\r\n\r\nimport Button from '@mui/material/Button'\r\nimport TextField from '@mui/material/TextField'\r\nimport { useFormik } from 'formik'\r\n\r\nimport cs from '../../../../common/styles/modalStyles/ModalStyles.module.scss'\r\nimport { useAppDispatch } from '../../../../hooks/reduxHooks'\r\nimport { addCardTC } from '../../cardsSlice'\r\n\r\nimport s from './AddCard.module.scss'\r\n\r\ntype AddCardPictureFormType = {\r\n  closeModal: (state: boolean) => void\r\n  cardsPack_id: string\r\n}\r\n\r\ntype FormikErrorType = {\r\n  question?: string\r\n  answer?: string\r\n}\r\n\r\nexport const PictureForm: FC<AddCardPictureFormType> = ({ closeModal, cardsPack_id }) => {\r\n  const dispatch = useAppDispatch()\r\n  const [image, setImage] = useState('')\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      question: image,\r\n      answer: '',\r\n    },\r\n    validate: values => {\r\n      const errors: FormikErrorType = {}\r\n\r\n      if (!image) {\r\n        errors.question = 'Question is required'\r\n      }\r\n      if (!values.answer) {\r\n        errors.answer = 'Answer is required'\r\n      }\r\n\r\n      return errors\r\n    },\r\n    onSubmit: async values => {\r\n      const { answer } = formik.values\r\n\r\n      dispatch(addCardTC({ cardsPack_id, question: ' ', questionImg: image, answer }))\r\n      closeModal(false)\r\n      formik.resetForm()\r\n    },\r\n  })\r\n\r\n  const handleCloseModal = () => closeModal(false)\r\n\r\n  //to be refactored as util function\r\n  const handleCoverInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files.length) {\r\n      const file = e.target.files[0]\r\n\r\n      if (file.size < 4000000 && file.type.includes('image')) {\r\n        const reader = new FileReader()\r\n\r\n        reader.onload = () => {\r\n          const file64 = reader.result as string\r\n\r\n          setImage(file64)\r\n        }\r\n\r\n        reader.readAsDataURL(file)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={s.AddTextCard}>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        {image ? (\r\n          <div className={cs.ImageContainer}>\r\n            <img src={image} alt=\"cover\" className={cs.Image} />\r\n          </div>\r\n        ) : (\r\n          ''\r\n        )}\r\n\r\n        <label>\r\n          <input type=\"file\" hidden onChange={handleCoverInput} accept={'image/*'} />\r\n          <Button variant={'contained'} className={cs.FormFields} component={'span'}>\r\n            Add Question Picture\r\n          </Button>\r\n        </label>\r\n\r\n        {\r\n          <div\r\n            className={\r\n              formik.touched.question && formik.errors.question\r\n                ? `${s.Error} ${s.Error__active}`\r\n                : `${s.Error}`\r\n            }\r\n          >\r\n            {formik.errors.question}\r\n          </div>\r\n        }\r\n        <TextField\r\n          className={s.FormControl}\r\n          margin=\"dense\"\r\n          size={'small'}\r\n          label={'answer'}\r\n          {...formik.getFieldProps('answer')}\r\n        />\r\n        {\r\n          <div\r\n            className={\r\n              formik.touched.answer && formik.errors.answer\r\n                ? `${s.Error} ${s.Error__active}`\r\n                : `${s.Error}`\r\n            }\r\n          >\r\n            {formik.errors.answer}\r\n          </div>\r\n        }\r\n        <div className={s.Submit}>\r\n          <Button variant=\"outlined\" onClick={handleCloseModal} type={'button'}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            type={'submit'}\r\n            variant=\"contained\"\r\n            disabled={!formik.errors.answer && !formik.errors.question ? false : true}\r\n          >\r\n            Create\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","import { FC } from 'react'\r\n\r\nimport Button from '@mui/material/Button'\r\nimport TextField from '@mui/material/TextField'\r\nimport { useFormik } from 'formik'\r\n\r\nimport { useAppDispatch } from '../../../../hooks/reduxHooks'\r\nimport { addCardTC } from '../../cardsSlice'\r\n\r\nimport s from './AddCard.module.scss'\r\n\r\ntype AddCardTextFormType = {\r\n  closeModal: (state: boolean) => void\r\n  cardsPack_id: string\r\n}\r\n\r\ntype FormikErrorType = {\r\n  question?: string\r\n  answer?: string\r\n}\r\n\r\nexport const TextForm: FC<AddCardTextFormType> = ({ closeModal, cardsPack_id }) => {\r\n  const dispatch = useAppDispatch()\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      question: '',\r\n      answer: '',\r\n    },\r\n    validate: values => {\r\n      const errors: FormikErrorType = {}\r\n\r\n      if (!values.question) {\r\n        errors.question = 'Question is required'\r\n      }\r\n      if (!values.answer) {\r\n        errors.answer = 'Answer is required'\r\n      }\r\n\r\n      return errors\r\n    },\r\n    onSubmit: async values => {\r\n      console.log(values)\r\n      const { question, answer } = formik.values\r\n\r\n      console.log('submit')\r\n      dispatch(addCardTC({ cardsPack_id, question, answer }))\r\n      closeModal(false)\r\n      formik.resetForm()\r\n    },\r\n  })\r\n\r\n  const handleCloseModal = () => closeModal(false)\r\n\r\n  return (\r\n    <div className={s.AddTextCard}>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <TextField\r\n          className={s.FormControl}\r\n          margin=\"dense\"\r\n          size={'small'}\r\n          label={'question'}\r\n          {...formik.getFieldProps('question')}\r\n        />\r\n        {\r\n          <div\r\n            className={\r\n              formik.touched.question && formik.errors.question\r\n                ? `${s.Error} ${s.Error__active}`\r\n                : `${s.Error}`\r\n            }\r\n          >\r\n            {formik.errors.question}\r\n          </div>\r\n        }\r\n        <TextField\r\n          className={s.FormControl}\r\n          margin=\"dense\"\r\n          size={'small'}\r\n          label={'answer'}\r\n          {...formik.getFieldProps('answer')}\r\n        />\r\n        {\r\n          <div\r\n            className={\r\n              formik.touched.answer && formik.errors.answer\r\n                ? `${s.Error} ${s.Error__active}`\r\n                : `${s.Error}`\r\n            }\r\n          >\r\n            {formik.errors.answer}\r\n          </div>\r\n        }\r\n        <div className={s.Submit}>\r\n          <Button variant=\"outlined\" onClick={handleCloseModal} type={'button'}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            type={'submit'}\r\n            variant=\"contained\"\r\n            disabled={!formik.errors.answer && !formik.errors.question ? false : true}\r\n          >\r\n            Create\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","import { FC, useEffect, useState } from 'react'\r\n\r\nimport { FormControl, MenuItem, Select, SelectChangeEvent } from '@mui/material'\r\n\r\nimport s from './AddCard.module.scss'\r\nimport { PictureForm } from './PictureForm'\r\nimport { TextForm } from './TextForm'\r\n\r\ntype AddCardType = {\r\n  active: boolean\r\n  closeModal: (state: boolean) => void\r\n  cardsPack_id: string\r\n}\r\n\r\nexport const AddCard: FC<AddCardType> = ({ active, closeModal, cardsPack_id }) => {\r\n  const [cardFormat, setCardFormat] = useState('')\r\n\r\n  useEffect(() => {\r\n    if (!active) {\r\n      setCardFormat('')\r\n    }\r\n  }, [active])\r\n\r\n  const handleChange = (event: SelectChangeEvent) => setCardFormat(event.target.value)\r\n\r\n  let form\r\n\r\n  switch (cardFormat) {\r\n    case 'Text':\r\n      form = <TextForm closeModal={closeModal} cardsPack_id={cardsPack_id} />\r\n      break\r\n    case 'Picture':\r\n      form = <PictureForm closeModal={closeModal} cardsPack_id={cardsPack_id} />\r\n      break\r\n    default:\r\n      form = ''\r\n      break\r\n  }\r\n\r\n  return (\r\n    <div className={s.CardContainer}>\r\n      <div className={s.CardTypeContainer}>\r\n        <p className={s.CardTypeContainer__title}>Choose a question format</p>\r\n        <div className={s.Type}>\r\n          <FormControl fullWidth>\r\n            <Select\r\n              size={'small'}\r\n              id=\"demo-simple-select\"\r\n              value={cardFormat}\r\n              onChange={handleChange}\r\n            >\r\n              <MenuItem value={'Text'}>Text</MenuItem>\r\n              <MenuItem value={'Picture'}>Picture</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n      </div>\r\n      <div>{form}</div>\r\n    </div>\r\n  )\r\n}\r\n","import { useCallback, useEffect, useRef, useState } from 'react'\r\n\r\nimport isBase64 from 'is-base64'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nimport { isMyPack } from '../../app/selectors'\r\nimport { CustomPagination } from '../../common/components/CustomPagination/CustomPagination'\r\nimport { CustomSearch } from '../../common/components/CustomSearch/CustomSearch'\r\nimport { LoadingProgress } from '../../common/components/LoadingProgress/LoadingProgress'\r\nimport { CustomModalDialog } from '../../common/components/ModalDialog/CustomModalDialog'\r\nimport { PageTitleBlock } from '../../common/components/PageTitleBlock/PageTitleBlock'\r\nimport { PATH } from '../../constants/routePaths.enum'\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/reduxHooks'\r\nimport { getQueryParams } from '../../utils/getQueryParams'\r\nimport { useNavigateNoUpdates } from '../../utils/routerUtils'\r\n\r\nimport s from './Cards.module.scss'\r\nimport { CardsErrorType, clearCardsState, setCardsQueryParams, setError } from './cardsSlice'\r\nimport { CardsTable } from './CardsTable/CardsTable'\r\nimport { AddCard } from './Modals/AddCard/AddCard'\r\n\r\nexport const Cards = () => {\r\n  const { id } = useParams()\r\n  const dispatch = useAppDispatch()\r\n  const allParams = getQueryParams()\r\n  const isTableNotEmpty = useAppSelector(state => state.cards.cardsData.cardsTotalCount)\r\n  const isItMyPack = useAppSelector(isMyPack)\r\n  const packName = useAppSelector(state => state.cards.cardsData.packName)\r\n  const packDeckCover = useAppSelector(state => state.cards.cardsData.packDeckCover)\r\n  const cardsError = useAppSelector<CardsErrorType>(state => state.cards.error)\r\n  const navigate = useNavigateNoUpdates()\r\n  const validImg = isBase64(packDeckCover, { mimeRequired: true })\r\n  const cardQuestion = allParams.cardQuestion ? 1 : 0\r\n  const showElement = useRef(isTableNotEmpty || cardQuestion || 0) // Spike fix for wrong cardsTotalCount coming from backend\r\n\r\n  if (isTableNotEmpty && !showElement.current) {\r\n    showElement.current++\r\n  }\r\n\r\n  const [addCard, setAddCard] = useState(false)\r\n\r\n  const handleTitleButton = useCallback(() => setAddCard(true), [])\r\n\r\n  const handleLearnCards = useCallback(() => navigate(PATH.LEARN + `/${id}`), [])\r\n\r\n  useEffect(() => {\r\n    if (cardsError === 'WRONG_ID') {\r\n      navigate(PATH.PAGE_NOT_FOUND, { replace: true })\r\n      dispatch(setError({ error: null }))\r\n    }\r\n  }, [cardsError])\r\n\r\n  useEffect(() => {\r\n    dispatch(setCardsQueryParams({ ...allParams, cardsPack_id: id }))\r\n\r\n    return () => {\r\n      dispatch(clearCardsState())\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {packName ? (\r\n        <div className={s.cardsContainer}>\r\n          <div className={s.cards__controlBlock}>\r\n            <PageTitleBlock\r\n              linkToPacks\r\n              title={packName}\r\n              hasButtons={!!showElement.current}\r\n              buttonClick={isItMyPack ? handleTitleButton : handleLearnCards}\r\n            />\r\n\r\n            {validImg && (\r\n              <div className={s.imgContainer}>\r\n                <img src={packDeckCover} alt=\"cover\" className={s.img} />\r\n              </div>\r\n            )}\r\n\r\n            {!!showElement.current && <CustomSearch forCards />}\r\n          </div>\r\n\r\n          <CardsTable\r\n            isMine={isItMyPack}\r\n            showButton={!!showElement.current}\r\n            handleTitleButton={handleTitleButton}\r\n          />\r\n          <CustomPagination forCards />\r\n\r\n          {addCard ? (\r\n            <CustomModalDialog active={addCard} setActive={setAddCard}>\r\n              <AddCard active={addCard} closeModal={setAddCard} cardsPack_id={id || ''} />\r\n            </CustomModalDialog>\r\n          ) : (\r\n            ''\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <LoadingProgress />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n"],"names":["DeleteCard","id","closeModal","dispatch","useAppDispatch","handleDeletePack","deleteCardTC","className","s","Button","onClick","type","variant","color","EditCard","cardsData","useState","questionImg","image","setImage","formik","useFormik","initialValues","question","answer","validate","values","errors","onSubmit","console","log","updateCardTC","resetForm","handleCoverInput","e","target","files","length","file","size","includes","reader","FileReader","onload","file64","result","readAsDataURL","handleSubmit","cs","src","alt","onError","currentTarget","onerror","cover","hidden","onChange","accept","component","TextField","margin","label","getFieldProps","touched","disabled","CardActionsMenuList","handleEdit","handleDelete","closeMenu","listRef","useRef","useOnClickOutside","ref","CardActionsMenu","cardID","isMenuOpen","setIsMenuOpen","menuSheet","openModals","setOpenModals","showModals","reduce","a","b","sendData","portalStyleBg","handleToogleMenu","handleClose","document","body","style","overflow","Portal","CardsTableBody","heads","isMine","tableData","useAppSelector","state","cards","navigate","useNavigateNoUpdates","map","row","h","i","validImg","isBase64","mimeRequired","scope","_id","packId","cardsPack_id","requestStatus","PATH","cardId","Rating","value","readOnly","dayjs","format","CardsTable","memo","showButton","handleTitleButton","status","isTableNotEmpty","cardsTotalCount","pageCount","queryParams","CustomTableHead","forCards","withActions","TableBodySkeleton","columnsCount","rowsCount","LoadingProgress","CustomButton","PictureForm","addCardTC","TextForm","AddCard","active","cardFormat","setCardFormat","useEffect","form","FormControl","fullWidth","Select","event","MenuItem","Cards","useParams","allParams","getQueryParams","isItMyPack","isMyPack","packName","packDeckCover","cardsError","error","cardQuestion","showElement","current","addCard","setAddCard","useCallback","handleLearnCards","replace","setError","setCardsQueryParams","clearCardsState","PageTitleBlock","linkToPacks","title","hasButtons","buttonClick","CustomSearch","CustomPagination","CustomModalDialog","setActive"],"sourceRoot":""}