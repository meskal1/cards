{"version":3,"file":"static/js/909.fba4faa4.chunk.js","mappings":"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","sources":["webpack://cards/./src/features/cards/Cards.module.scss?c16b","webpack://cards/./src/features/cards/CardsTable/CardsTable.module.scss?0e88","webpack://cards/./src/features/cards/Modals/AddEditCard/AddEditCard.module.scss?1b85","features/cards/Modals/AddEditCard/AddEditCard.tsx","features/cards/Modals/DeleteCard/DeleteCard.tsx","webpack://cards/./src/features/cards/CardActionsMenu/CardActionsMenu.module.scss?18cc","features/cards/CardActionsMenu/CardActionsMenuList/CardActionsMenuList.tsx","features/cards/CardActionsMenu/CardActionsMenu.tsx","webpack://cards/./src/features/cards/CardsTable/CardsTableBody/CardsTableBody.module.scss?211e","features/cards/CardsTable/CardsTableBody/CardsTableBody.tsx","features/cards/CardsTable/CardsTable.tsx","features/cards/Cards.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cardsContainer\":\"Cards_cardsContainer__aYsFI\",\"cards__controlBlock\":\"Cards_cards__controlBlock__qTx-z\",\"cards__table\":\"Cards_cards__table__sn9Sz\",\"imgContainer\":\"Cards_imgContainer__b9F-k\",\"img\":\"Cards_img__cGe1w\"};","// extracted by mini-css-extract-plugin\nexport default {\"tableCards\":\"CardsTable_tableCards__2IL8g\",\"cards__emptyBlock\":\"CardsTable_cards__emptyBlock__Zf3yi\",\"cards__emptyTitle\":\"CardsTable_cards__emptyTitle__2rNiu\",\"addButton\":\"CardsTable_addButton__qsLXM\"};","// extracted by mini-css-extract-plugin\nexport default {\"selectContainer\":\"AddEditCard_selectContainer__6UPPR\",\"addImageBlock\":\"AddEditCard_addImageBlock__cVyCq\",\"dargOver\":\"AddEditCard_dargOver__AumPn\",\"addImageBlockTitle\":\"AddEditCard_addImageBlockTitle__4Hfe0\",\"hidden\":\"AddEditCard_hidden__SsOwQ\",\"imageContainer\":\"AddEditCard_imageContainer__+hm0Q\",\"image\":\"AddEditCard_image__APHyn\"};","import {\r\n  FC,\r\n  useState,\r\n  useCallback,\r\n  ChangeEvent,\r\n  MutableRefObject,\r\n  useRef,\r\n  useEffect,\r\n  DragEvent,\r\n  KeyboardEvent,\r\n  memo,\r\n} from 'react'\r\n\r\nimport { useFormik } from 'formik'\r\nimport isBase64 from 'is-base64'\r\n\r\nimport { CustomInput } from '../../../../common/components/CustomInput/CustomInput'\r\nimport { CustomSelect } from '../../../../common/components/CustomSelect/CustomSelect'\r\nimport { MainPopup } from '../../../../common/components/Popups/MainPopup/MainPopup'\r\nimport { useAppDispatch } from '../../../../hooks/useAppDispatch'\r\nimport { base64Converter } from '../../../../utils/base64Converter'\r\nimport { cutSpaces } from '../../../../utils/cutSpaces'\r\nimport { newCardText, validateImage } from '../../../../utils/validationSchema'\r\nimport { addCardTC, updateCardTC, UpdateCardType } from '../../cardsSlice'\r\n\r\nimport s from './AddEditCard.module.scss'\r\n\r\ntype AddEditCardType = {\r\n  isOpened: boolean\r\n  onClose: () => void\r\n  cardsPack_id?: string\r\n  cardsData?: UpdateCardType\r\n}\r\n\r\nconst options = [\r\n  { id: 'text', label: 'Text' },\r\n  { id: 'picture', label: 'Picture' },\r\n]\r\n\r\nexport const AddEditCard: FC<AddEditCardType> = memo(\r\n  ({ isOpened, onClose, cardsPack_id = '', cardsData }) => {\r\n    const dispatch = useAppDispatch()\r\n    const validImg = isBase64(cardsData?.questionImg || '', { mimeRequired: true })\r\n    const initSelect = validImg ? options[1].id : options[0].id\r\n    const [selectedItem, setSelectedItem] = useState(initSelect)\r\n    const [base64image, setBase64image] = useState(validImg ? cardsData?.questionImg : '')\r\n    const [fileImage, setFileImage] = useState<File | null>(null)\r\n    const [dragOver, setDragOver] = useState(false)\r\n    const isOptionText = selectedItem !== 'text'\r\n    const questionRef = useRef() as MutableRefObject<HTMLInputElement>\r\n    const validateData = {\r\n      size: fileImage?.size || 0,\r\n      type: fileImage?.type || '',\r\n      selectedItem: isOptionText,\r\n      isImageExist: !!base64image,\r\n    }\r\n    const initialValues = {\r\n      questionImg: '',\r\n      question: cardsData?.question || '',\r\n      answer: cardsData?.answer || '',\r\n    }\r\n\r\n    const formik = useFormik({\r\n      initialValues,\r\n      validationSchema: newCardText,\r\n      validate: () => validateImage(validateData),\r\n      onSubmit: values => {\r\n        const question = isOptionText ? '' : values.question\r\n        const questionImg = fileImage || base64image ? base64image : ' '\r\n        const answerChanged = values.answer !== initialValues.answer\r\n        const questionChanged = values.question !== initialValues.question\r\n\r\n        if (cardsData && (fileImage || answerChanged || questionChanged)) {\r\n          dispatch(\r\n            updateCardTC({\r\n              answer: cutSpaces(values.answer),\r\n              question: cutSpaces(values.question),\r\n              id: cardsData?.id || '',\r\n              questionImg,\r\n            })\r\n          )\r\n        }\r\n\r\n        if (!cardsData) {\r\n          dispatch(\r\n            addCardTC({\r\n              answer: cutSpaces(values.answer),\r\n              question: cutSpaces(question),\r\n              questionImg: base64image,\r\n              cardsPack_id,\r\n            })\r\n          )\r\n        }\r\n        onClose()\r\n      },\r\n    })\r\n\r\n    const handleFileUpload = async (e: ChangeEvent<any> | DragEvent<HTMLLabelElement>) => {\r\n      e.preventDefault()\r\n      try {\r\n        if ('files' in e.target && e.target.files) {\r\n          setFileImage(e.target.files[0])\r\n        } else if ('dataTransfer' in e) {\r\n          setFileImage(e.dataTransfer.files[0])\r\n        }\r\n        const base64 = (await base64Converter(e)) as string\r\n\r\n        formik.setFieldValue('question', ' ')\r\n        formik.setTouched({ ...formik.touched, questionImg: true })\r\n        setBase64image(base64)\r\n      } catch (e) {\r\n        console.log('Error File Upload: ', e)\r\n      }\r\n    }\r\n\r\n    const handleLabelDragOver = (e: DragEvent<HTMLLabelElement>) => {\r\n      e.preventDefault()\r\n      setDragOver(true)\r\n    }\r\n\r\n    const handleFieldKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {\r\n      if (e.key === 'Enter') {\r\n        formik.handleSubmit()\r\n      }\r\n    }\r\n\r\n    const handleSelectedItem = useCallback(\r\n      (item: string) => {\r\n        if (selectedItem !== item) {\r\n          setSelectedItem(item)\r\n          formik.resetForm()\r\n          formik.setValues({ questionImg: '', question: '', answer: '' })\r\n          formik.setFieldError('questionImg', '')\r\n          setBase64image('')\r\n          setFileImage(null)\r\n        }\r\n      },\r\n      [selectedItem]\r\n    )\r\n\r\n    useEffect(() => {\r\n      if (!isOptionText) {\r\n        setTimeout(() => questionRef?.current?.focus(), 50)\r\n      }\r\n    }, [])\r\n\r\n    return (\r\n      <MainPopup\r\n        title={cardsData ? 'Edit card' : 'Add new card'}\r\n        onOkButtonText={cardsData ? 'Update' : 'Create'}\r\n        onOk={formik.handleSubmit}\r\n        isOpened={isOpened}\r\n        onClose={onClose}\r\n      >\r\n        <div className={s.selectContainer}>\r\n          <p className={s.selectTitle}>Choose a question format</p>\r\n          <CustomSelect\r\n            positionOptions={'left'}\r\n            initValue={selectedItem}\r\n            options={options}\r\n            selectedOption={handleSelectedItem}\r\n          />\r\n        </div>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          {selectedItem === 'text' ? (\r\n            <CustomInput\r\n              inputRef={questionRef}\r\n              label=\"Question\"\r\n              autoComplete=\"new-password\"\r\n              error={formik.touched.question && !!formik.errors.question}\r\n              helperText={formik.touched.question && formik.errors.question}\r\n              onKeyDown={handleFieldKeyDown}\r\n              {...formik.getFieldProps('question')}\r\n            />\r\n          ) : (\r\n            <label\r\n              className={`${s.addImageBlock} ${dragOver ? s.dargOver : ''}`}\r\n              onDragOver={handleLabelDragOver}\r\n              onDragLeave={() => setDragOver(false)}\r\n              onDrop={handleFileUpload}\r\n            >\r\n              <p className={s.addImageBlockTitle}>\r\n                Drag your image here or click to upload.\r\n                <br />\r\n                File size should be less than 100kb\r\n              </p>\r\n              <CustomInput\r\n                type={'file'}\r\n                inputProps={{ accept: '.jpg,.jpeg,.gif,.png,.webp,.svg' }}\r\n                className={s.hidden}\r\n                error={formik.touched.questionImg && !!formik.errors.questionImg}\r\n                helperText={formik.touched.questionImg && formik.errors.questionImg}\r\n                {...formik.getFieldProps('questionImg')}\r\n                onChange={handleFileUpload}\r\n              />\r\n              {!!base64image && (\r\n                <div className={s.imageContainer}>\r\n                  <img src={base64image} alt=\"cover\" className={s.image} />\r\n                </div>\r\n              )}\r\n            </label>\r\n          )}\r\n\r\n          <CustomInput\r\n            label=\"Answer\"\r\n            autoComplete=\"new-password\"\r\n            autoFocus={isOpened}\r\n            error={formik.touched.answer && !!formik.errors.answer}\r\n            helperText={formik.touched.answer && formik.errors.answer}\r\n            onKeyDown={handleFieldKeyDown}\r\n            {...formik.getFieldProps('answer')}\r\n          />\r\n        </form>\r\n      </MainPopup>\r\n    )\r\n  }\r\n)\r\n","import { FC } from 'react'\r\n\r\nimport { Dialog } from '../../../../common/components/Popups/Dialog/Dialog'\r\nimport { useAppDispatch } from '../../../../hooks/useAppDispatch'\r\nimport { useEnterKey } from '../../../../hooks/useEnterKey'\r\nimport { deleteCardTC } from '../../cardsSlice'\r\n\r\ntype DeleteCardType = {\r\n  id: string\r\n  isOpened: boolean\r\n  onClose: () => void\r\n}\r\n\r\nexport const DeleteCard: FC<DeleteCardType> = ({ id, isOpened, onClose }) => {\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleDeleteCard = () => {\r\n    dispatch(deleteCardTC(id))\r\n    onClose()\r\n  }\r\n\r\n  useEnterKey(handleDeleteCard)\r\n\r\n  return (\r\n    <Dialog\r\n      title={'Delete card'}\r\n      primaryColor={'red'}\r\n      onOkButtonText={'Delete'}\r\n      onOk={handleDeleteCard}\r\n      isOpened={isOpened}\r\n      onClose={onClose}\r\n    >\r\n      Are you sure you want to delete current card? Confirm deletion\r\n    </Dialog>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContainer\":\"CardActionsMenu_menuContainer__78870\",\"menu\":\"CardActionsMenu_menu__aneCs\",\"openMenuLeft\":\"CardActionsMenu_openMenuLeft__SOq5z\",\"animateWidth\":\"CardActionsMenu_animateWidth__38a0f\",\"menuItem\":\"CardActionsMenu_menuItem__5n86X\",\"openToLeft\":\"CardActionsMenu_openToLeft__kGamp\"};","import { FC, MutableRefObject, useRef } from 'react'\r\n\r\nimport { useEscapeKey } from '../../../../hooks/useEscapeKey'\r\nimport { useOnClickOutside } from '../../../../hooks/useOnClickOutside'\r\nimport s from '../CardActionsMenu.module.scss'\r\n\r\ntype CardActionsMenuListType = {\r\n  parentRef: MutableRefObject<HTMLDivElement>\r\n  handleEdit: () => void\r\n  handleDelete: () => void\r\n  closeMenu: () => void\r\n}\r\n\r\nexport const CardActionsMenuList: FC<CardActionsMenuListType> = ({\r\n  parentRef,\r\n  handleEdit,\r\n  handleDelete,\r\n  closeMenu,\r\n}) => {\r\n  const listRef = useRef() as MutableRefObject<HTMLUListElement>\r\n\r\n  useOnClickOutside(closeMenu, listRef, parentRef)\r\n  useEscapeKey(closeMenu)\r\n\r\n  return (\r\n    <ul ref={listRef} className={s.menu} onClick={closeMenu}>\r\n      <li className={s.menuItem} onMouseDown={handleEdit}></li>\r\n      <li className={s.menuItem} onMouseDown={handleDelete}></li>\r\n    </ul>\r\n  )\r\n}\r\n","import { FC, MutableRefObject, useRef, useState } from 'react'\r\n\r\nimport { AddEditCard } from '../Modals/AddEditCard/AddEditCard'\r\nimport { DeleteCard } from '../Modals/DeleteCard/DeleteCard'\r\n\r\nimport s from './CardActionsMenu.module.scss'\r\nimport { CardActionsMenuList } from './CardActionsMenuList/CardActionsMenuList'\r\n\r\ntype CardActionsMenuType = {\r\n  cardID: string\r\n  answer: string\r\n  question: string\r\n  questionImg: string\r\n}\r\n\r\nexport const CardActionsMenu: FC<CardActionsMenuType> = ({\r\n  cardID,\r\n  answer,\r\n  question,\r\n  questionImg,\r\n}) => {\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false)\r\n  const menuSheet = isMenuOpen ? s.openMenuLeft : ''\r\n  const initOpenModals = {\r\n    deleteOpened: false,\r\n    editOpened: false,\r\n  }\r\n  const [modals, setModals] = useState<typeof initOpenModals>(initOpenModals)\r\n  const menuRef = useRef() as MutableRefObject<HTMLDivElement>\r\n  const sendData = {\r\n    id: cardID,\r\n    answer: answer,\r\n    question: question,\r\n    questionImg: questionImg,\r\n  }\r\n\r\n  const handleToogleMenu = () => setIsMenuOpen(!isMenuOpen)\r\n\r\n  const handleCloseModal = () => setModals(initOpenModals)\r\n\r\n  const handleToggleEditModal = () => setModals({ ...modals, editOpened: !modals.editOpened })\r\n\r\n  const handleToggleDeleteModal = () => setModals({ ...modals, deleteOpened: !modals.deleteOpened })\r\n\r\n  return (\r\n    <>\r\n      {modals.editOpened && (\r\n        <AddEditCard isOpened={modals.editOpened} onClose={handleCloseModal} cardsData={sendData} />\r\n      )}\r\n\r\n      {modals.deleteOpened && (\r\n        <DeleteCard isOpened={modals.deleteOpened} id={cardID} onClose={handleCloseModal} />\r\n      )}\r\n\r\n      <div ref={menuRef} className={`${s.menuContainer} ${menuSheet}`} onClick={handleToogleMenu}>\r\n        {isMenuOpen && (\r\n          <CardActionsMenuList\r\n            parentRef={menuRef}\r\n            handleEdit={handleToggleEditModal}\r\n            handleDelete={handleToggleDeleteModal}\r\n            closeMenu={handleToogleMenu}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"cardImageWrapper\":\"CardsTableBody_cardImageWrapper__8RZer\",\"cardName\":\"CardsTableBody_cardName__Qe-Vb\",\"cardNameAdaptive\":\"CardsTableBody_cardNameAdaptive__u389k\",\"cardImage\":\"CardsTableBody_cardImage__wUpg8\",\"tableCards__body\":\"CardsTableBody_tableCards__body__AC4ub\",\"tableCards__bodyRow\":\"CardsTableBody_tableCards__bodyRow__5LfMu\",\"tableCards__bodyCellContent\":\"CardsTableBody_tableCards__bodyCellContent__Jfoqc\",\"tableCards__bodyCell\":\"CardsTableBody_tableCards__bodyCell__PDQUj\",\"tableCards__bodyCellTitle\":\"CardsTableBody_tableCards__bodyCellTitle__5SgyV\",\"rating\":\"CardsTableBody_rating__G2Emo\",\"linkToLearnActive\":\"CardsTableBody_linkToLearnActive__qtib5\",\"linkToLearnDisabled\":\"CardsTableBody_linkToLearnDisabled__n027o\"};","import { FC } from 'react'\r\n\r\nimport Rating from '@mui/material/Rating'\r\nimport dayjs from 'dayjs'\r\nimport isBase64 from 'is-base64'\r\n\r\nimport { RequestStatusType } from '../../../../app/appSlice'\r\nimport { TableHeadType } from '../../../../common/components/CustomTableHead/CustomTableHead'\r\nimport { PATH } from '../../../../constants/routePaths.enum'\r\nimport { useAppSelector } from '../../../../hooks/useAppSelector'\r\nimport { cutSpaces } from '../../../../utils/cutSpaces'\r\nimport { useNavigateNoUpdates } from '../../../../utils/routerUtils'\r\nimport { CardActionsMenu } from '../../CardActionsMenu/CardActionsMenu'\r\nimport { AppCardType } from '../../cardsSlice'\r\nimport { CardsOrderByType } from '../CardsTable'\r\n\r\nimport s from './CardsTableBody.module.scss'\r\n\r\ntype CardsTableBodyType = {\r\n  heads: TableHeadType<CardsOrderByType>[]\r\n  isMine: boolean\r\n}\r\n\r\nexport const CardsTableBody: FC<CardsTableBodyType> = ({ heads, isMine }) => {\r\n  const tableData = useAppSelector<AppCardType[]>(state => state.cards.tableData)\r\n  const navigate = useNavigateNoUpdates()\r\n\r\n  const handleOpenCard = (id: string, packId: string, requestStatus: RequestStatusType) => {\r\n    if (requestStatus === 'loading') return\r\n    navigate(PATH.LEARN + `/${packId}`, { state: { cardId: id } })\r\n  }\r\n\r\n  return (\r\n    <tbody className={s.tableCards__body}>\r\n      {tableData.map(row => {\r\n        return (\r\n          <tr key={row._id} className={s.tableCards__bodyRow}>\r\n            {heads.map((h, i) => {\r\n              const validImg = isBase64(row.questionImg, { mimeRequired: true })\r\n\r\n              return (\r\n                <td\r\n                  className={s.tableCards__bodyCell}\r\n                  scope=\"row\"\r\n                  key={h.id}\r\n                  onClick={() => handleOpenCard(row._id, row.cardsPack_id, row.requestStatus)}\r\n                >\r\n                  <div className={s.tableCards__bodyCellContent}>\r\n                    <div className={s.tableCards__bodyCellTitle}>\r\n                      {i === 0 ? `${validImg ? '' : row[h.id]}` : h.label}\r\n                    </div>\r\n\r\n                    {h.id === 'question' && validImg && (\r\n                      <div className={s.cardImageWrapper}>\r\n                        <img src={row.questionImg} alt=\"deckCover\" className={s.cardImage} />\r\n                      </div>\r\n                    )}\r\n\r\n                    {h.id === 'grade' ? (\r\n                      <Rating className={s.rating} value={row[h.id]} readOnly />\r\n                    ) : (\r\n                      <p\r\n                        className={`${s.cardNameAdaptive} ${\r\n                          h.id === 'question' && validImg ? s.cardName : ''\r\n                        }`}\r\n                      >\r\n                        {h.id === 'updated'\r\n                          ? dayjs(row[h.id]).format('DD.MM.YYYY')\r\n                          : cutSpaces(row[h.id] + '')}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                </td>\r\n              )\r\n            })}\r\n            <td className={s.tableCards__bodyCell}>\r\n              {isMine && (\r\n                <CardActionsMenu\r\n                  cardID={row._id}\r\n                  answer={row.answer}\r\n                  question={row.question}\r\n                  questionImg={row.questionImg}\r\n                />\r\n              )}\r\n            </td>\r\n          </tr>\r\n        )\r\n      })}\r\n    </tbody>\r\n  )\r\n}\r\n","import { FC, memo } from 'react'\r\n\r\nimport { RequestStatusType } from '../../../app/appSlice'\r\nimport { CustomButton } from '../../../common/components/CustomButton/CustomButton'\r\nimport { TableBodySkeleton } from '../../../common/components/CustomSkeletons/TableBodySkeleton/TableBodySkeleton'\r\nimport {\r\n  CustomTableHead,\r\n  TableHeadType,\r\n} from '../../../common/components/CustomTableHead/CustomTableHead'\r\nimport { LoadingProgress } from '../../../common/components/LoadingProgress/LoadingProgress'\r\nimport { useAppSelector } from '../../../hooks/useAppSelector'\r\n\r\nimport s from './CardsTable.module.scss'\r\nimport { CardsTableBody } from './CardsTableBody/CardsTableBody'\r\n\r\nexport type CardsOrderByType = 'question' | 'answer' | 'updated' | 'grade'\r\n\r\nconst heads: TableHeadType<CardsOrderByType>[] = [\r\n  { id: 'question', label: 'Question' },\r\n  { id: 'answer', label: 'Answer' },\r\n  { id: 'grade', label: 'Grade' },\r\n  { id: 'updated', label: 'Last updated' },\r\n]\r\n\r\ntype CardsTablePropsType = {\r\n  isMine: boolean\r\n  showButton: boolean\r\n  handleTitleButton: () => void\r\n}\r\n\r\nexport const CardsTable: FC<CardsTablePropsType> = memo(\r\n  ({ isMine, showButton, handleTitleButton }) => {\r\n    const status = useAppSelector<RequestStatusType>(state => state.cards.status)\r\n    const isTableNotEmpty = useAppSelector(state => state.cards.cardsData.cardsTotalCount)\r\n    const pageCount = useAppSelector(state => state.cards.queryParams.pageCount)\r\n\r\n    return (\r\n      <>\r\n        {isTableNotEmpty ? (\r\n          <table className={s.tableCards}>\r\n            <CustomTableHead heads={heads} forCards withActions={isMine} />\r\n            {status === 'loading' ? (\r\n              <TableBodySkeleton\r\n                columnsCount={heads.length}\r\n                rowsCount={pageCount}\r\n                withActions={isMine}\r\n              />\r\n            ) : (\r\n              <CardsTableBody heads={heads} isMine={isMine} />\r\n            )}\r\n          </table>\r\n        ) : (\r\n          <>\r\n            {status === 'loading' ? (\r\n              <LoadingProgress />\r\n            ) : (\r\n              <div className={s.cards__emptyBlock}>\r\n                <h3 className={s.cards__emptyTitle}>\r\n                  No cards found.{' '}\r\n                  {isMine && !showButton ? 'Click add new card to fill this pack' : ''}\r\n                </h3>\r\n\r\n                {isMine && !showButton && (\r\n                  <CustomButton className={s.addButton} onClick={handleTitleButton}>\r\n                    <p>Add new card</p>\r\n                  </CustomButton>\r\n                )}\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n)\r\n","import { useCallback, useEffect, useRef, useState } from 'react'\r\n\r\nimport isBase64 from 'is-base64'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nimport { isMyPack } from '../../app/selectors'\r\nimport { CustomPagination } from '../../common/components/CustomPagination/CustomPagination'\r\nimport { CustomSearch } from '../../common/components/CustomSearch/CustomSearch'\r\nimport { LoadingProgress } from '../../common/components/LoadingProgress/LoadingProgress'\r\nimport { PageTitleBlock } from '../../common/components/PageTitleBlock/PageTitleBlock'\r\nimport { PATH } from '../../constants/routePaths.enum'\r\nimport { useAppDispatch } from '../../hooks/useAppDispatch'\r\nimport { useAppSelector } from '../../hooks/useAppSelector'\r\nimport { getQueryParams } from '../../utils/getQueryParams'\r\nimport { useNavigateNoUpdates } from '../../utils/routerUtils'\r\n\r\nimport s from './Cards.module.scss'\r\nimport { CardsErrorType, clearCardsState, setCardsQueryParams, setError } from './cardsSlice'\r\nimport { CardsTable } from './CardsTable/CardsTable'\r\nimport { AddEditCard } from './Modals/AddEditCard/AddEditCard'\r\n\r\nexport const Cards = () => {\r\n  const { id } = useParams()\r\n  const dispatch = useAppDispatch()\r\n  const allParams = getQueryParams()\r\n  const isTableNotEmpty = useAppSelector(state => state.cards.cardsData.cardsTotalCount)\r\n  const isItMyPack = useAppSelector(isMyPack)\r\n  const packName = useAppSelector(state => state.cards.cardsData.packName)\r\n  const packDeckCover = useAppSelector(state => state.cards.cardsData.packDeckCover)\r\n  const cardsError = useAppSelector<CardsErrorType>(state => state.cards.error)\r\n  const navigate = useNavigateNoUpdates()\r\n  const [openModal, setOpenModal] = useState(false)\r\n  const validImg = isBase64(packDeckCover, { mimeRequired: true })\r\n  const cardQuestion = allParams.cardQuestion ? 1 : 0\r\n  const showElement = useRef(isTableNotEmpty || cardQuestion || 0) // Spike fix for wrong cardsTotalCount coming from backend\r\n\r\n  if (isTableNotEmpty && !showElement.current) {\r\n    showElement.current++\r\n  }\r\n\r\n  const handleToggleModal = useCallback(() => setOpenModal(!openModal), [openModal])\r\n\r\n  const handleLearnCards = useCallback(() => navigate(PATH.LEARN + `/${id}`), [])\r\n\r\n  useEffect(() => {\r\n    if (cardsError === 'WRONG_ID') {\r\n      navigate(PATH.PAGE_NOT_FOUND, { replace: true })\r\n      dispatch(setError({ error: null }))\r\n    }\r\n  }, [cardsError])\r\n\r\n  useEffect(() => {\r\n    dispatch(setCardsQueryParams({ ...allParams, cardsPack_id: id }))\r\n\r\n    return () => {\r\n      dispatch(clearCardsState())\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {packName ? (\r\n        <div className={s.cardsContainer}>\r\n          <div className={s.cards__controlBlock}>\r\n            <PageTitleBlock\r\n              linkToPacks\r\n              title={packName}\r\n              hasButtons={!!showElement.current}\r\n              buttonClick={isItMyPack ? handleToggleModal : handleLearnCards}\r\n            />\r\n\r\n            {validImg && (\r\n              <div className={s.imgContainer}>\r\n                <img src={packDeckCover} alt=\"cover\" className={s.img} />\r\n              </div>\r\n            )}\r\n\r\n            {!!showElement.current && <CustomSearch forCards />}\r\n          </div>\r\n\r\n          <CardsTable\r\n            isMine={isItMyPack}\r\n            showButton={!!showElement.current}\r\n            handleTitleButton={handleToggleModal}\r\n          />\r\n          <CustomPagination forCards />\r\n\r\n          {openModal && (\r\n            <AddEditCard isOpened={openModal} onClose={handleToggleModal} cardsPack_id={id || ''} />\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <LoadingProgress />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n"],"names":["options","id","label","AddEditCard","memo","isOpened","onClose","cardsPack_id","cardsData","dispatch","useAppDispatch","validImg","isBase64","questionImg","mimeRequired","initSelect","useState","selectedItem","setSelectedItem","base64image","setBase64image","fileImage","setFileImage","dragOver","setDragOver","isOptionText","questionRef","useRef","validateData","size","type","isImageExist","initialValues","question","answer","formik","useFormik","validationSchema","newCardText","validate","validateImage","onSubmit","values","answerChanged","questionChanged","updateCardTC","cutSpaces","addCardTC","handleFileUpload","e","preventDefault","target","files","dataTransfer","base64Converter","base64","setFieldValue","setTouched","touched","console","log","handleFieldKeyDown","key","handleSubmit","handleSelectedItem","useCallback","item","resetForm","setValues","setFieldError","useEffect","setTimeout","current","focus","MainPopup","title","onOkButtonText","onOk","className","s","CustomSelect","positionOptions","initValue","selectedOption","CustomInput","inputRef","autoComplete","error","errors","helperText","onKeyDown","getFieldProps","onDragOver","onDragLeave","onDrop","inputProps","accept","onChange","src","alt","autoFocus","DeleteCard","handleDeleteCard","deleteCardTC","useEnterKey","Dialog","primaryColor","CardActionsMenuList","parentRef","handleEdit","handleDelete","closeMenu","listRef","useOnClickOutside","useEscapeKey","ref","onClick","onMouseDown","CardActionsMenu","cardID","isMenuOpen","setIsMenuOpen","menuSheet","initOpenModals","deleteOpened","editOpened","modals","setModals","menuRef","sendData","handleToogleMenu","handleCloseModal","CardsTableBody","heads","isMine","tableData","useAppSelector","state","cards","navigate","useNavigateNoUpdates","map","row","h","i","scope","_id","packId","requestStatus","PATH","cardId","Rating","value","readOnly","dayjs","format","CardsTable","showButton","handleTitleButton","status","isTableNotEmpty","cardsTotalCount","pageCount","queryParams","CustomTableHead","forCards","withActions","TableBodySkeleton","columnsCount","length","rowsCount","LoadingProgress","CustomButton","Cards","useParams","allParams","getQueryParams","isItMyPack","isMyPack","packName","packDeckCover","cardsError","openModal","setOpenModal","cardQuestion","showElement","handleToggleModal","handleLearnCards","replace","setError","setCardsQueryParams","clearCardsState","PageTitleBlock","linkToPacks","hasButtons","buttonClick","CustomSearch","CustomPagination"],"sourceRoot":""}