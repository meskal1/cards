{"version":3,"file":"static/js/914.cc328709.chunk.js","mappings":"+KACA,EAAwB,2B,sCCSXA,EAA8C,SAAH,GAIjD,IAHLC,EAAS,EAATA,UACAC,EAAU,EAAVA,WACGC,GAAK,YAEFC,EAAU,UAAMC,EAAO,YAAIJ,GAAwB,IACnDK,EAAYJ,GAA0B,IAE5C,OACE,SAACK,EAAA,GAAS,gBACRN,UAAWG,EACXI,QAASL,EAAMK,SAAW,WAC1BC,KAAMN,EAAMM,MAAQ,OACpBC,UAAWP,EAAMO,YAAa,GAC1BP,GAAK,IACTD,WAAYI,IAGlB,C,+KChBaK,EAA8D,SAAH,GAIjE,IAHLC,EAAK,EAALA,MAEGT,GADC,EAAJM,MACQ,aAER,GAAwCI,EAAAA,EAAAA,WAAS,GAAM,eAAhDC,EAAY,KAAEC,EAAe,KAIpC,OACE,SAAC,KAAW,QACVN,KAAMK,EAAe,OAAS,WAC9BF,MAAOA,EACPI,WAAY,CACVC,cACE,SAAC,IAAc,CAACC,SAAU,MAAM,SAC7BN,IACC,SAAC,IAAU,CAAC,aAAW,6BAA6BO,QAVhC,WAAH,OAASJ,GAAiBD,EAAa,EAU6B,SAClFA,GAAe,SAAC,IAAa,KAAM,SAAC,IAAU,UAMrDX,GAGV,C,gLCtCA,EAAuC,0CAAvC,EAAqG,uCAArG,EAAiK,wCAAjK,EAA6N,uC,SCahNiB,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KACTC,GAAUC,EAAAA,EAAAA,MAAVD,MACFE,GAAoBC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,iBAAiB,IAExEI,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,SAAU,IAEZC,iBAAkBC,EAAAA,GAClBC,SAAU,SAAAC,GACRC,QAAQC,IAAIf,GACZF,GAASkB,EAAAA,EAAAA,IAAiB,CAAEP,SAAUI,EAAOJ,SAAUQ,mBAAoBjB,IAC7E,IAUF,OAPAkB,EAAAA,WAAgB,WACVhB,IACFI,EAAOa,YACPvB,EAASwB,EAAAA,EAAAA,OAEb,GAAG,CAAClB,KAGF,+BACE,iBAAK1B,UAAWI,EAAuB,WACrC,eAAIJ,UAAWI,EAAqB,kCACpC,kBAAMJ,UAAWI,EAAqBgC,SAAUN,EAAOe,aAAa,WAClE,SAACnC,EAAA,GAAmB,QAClBoC,MAAM,WACNC,MAAOjB,EAAOkB,QAAQf,YAAcH,EAAOmB,OAAOhB,SAClDhC,WAAY6B,EAAOkB,QAAQf,UAAYH,EAAOmB,OAAOhB,UACjDH,EAAOoB,cAAc,eAE3B,cAAGlD,UAAWI,EAAoB,qFAGlC,SAAC+C,EAAA,EAAY,WACX,wDAMZ,C,8ICzDMC,EAAOC,EAAAA,KAAaC,SAAS,YAC7BC,EAASH,EACTI,EAAQH,EAAAA,KAAaG,MAAM,uBAAuBF,SAAS,qBAC3DrB,EAAWoB,EAAAA,KAEdI,IAAI,EAAG,+CACPH,SAAS,uBACNI,EAAkBL,EAAAA,KAErBM,MAAM,CAACN,EAAAA,GAAQ,aAAc,2BAC7BC,SAAS,yBACNM,EAAaP,EAAAA,KAENQ,EAAwBR,EAAAA,GAAW,CAAEG,MAAAA,EAAOvB,SAAAA,EAAU2B,WAAAA,IAEtDE,EAA+BT,EAAAA,GAAW,CAAEG,MAAAA,EAAOvB,SAAAA,EAAUyB,gBAAAA,IAI7DvB,GAF0BkB,EAAAA,GAAW,CAAED,KAAAA,EAAMG,OAAAA,IAEfF,EAAAA,GAAW,CAAEpB,SAAAA,KAE3C8B,EAAiCV,EAAAA,GAAW,CAAEG,MAAAA,G","sources":["webpack://cards/./src/common/components/CustomInput/CustomInput.module.scss?ad3d","common/components/CustomInput/CustomInput.tsx","common/components/CustomPasswordInput/CustomPasswordInput.tsx","webpack://cards/./src/features/auth/NewPassword/NewPassword.module.scss?227a","features/auth/NewPassword/NewPassword.tsx","utils/validationSchema.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"CustomInput_input__ab1ub\"};","import React from 'react'\r\n\r\nimport { TextField, TextFieldProps } from '@mui/material'\r\n\r\nimport s from './CustomInput.module.scss'\r\n\r\ntype CustomInputPropsType = TextFieldProps & {\r\n  value: string //Use our value to control input and also because value in MUI has unknown type\r\n}\r\n\r\nexport const CustomInput: React.FC<CustomInputPropsType> = ({\r\n  className,\r\n  helperText,\r\n  ...props\r\n}) => {\r\n  const finalClass = `${s.input} ${className ? className : ''}`\r\n  const errorText = helperText ? helperText : ' '\r\n\r\n  return (\r\n    <TextField\r\n      className={finalClass}\r\n      variant={props.variant || 'standard'}\r\n      type={props.type || 'text'}\r\n      fullWidth={props.fullWidth || true}\r\n      {...props}\r\n      helperText={errorText}\r\n    />\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nimport Visibility from '@mui/icons-material/Visibility'\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff'\r\nimport { IconButton, InputAdornment, TextFieldProps } from '@mui/material'\r\n\r\nimport { CustomInput } from '../CustomInput/CustomInput'\r\n\r\ntype CustomPasswordInputPropsType = TextFieldProps & {\r\n  value: string //Use our value to control input and also because value in MUI has unknown type\r\n}\r\n\r\nexport const CustomPasswordInput: React.FC<CustomPasswordInputPropsType> = ({\r\n  value,\r\n  type,\r\n  ...props\r\n}) => {\r\n  const [showPassword, setShowPassword] = useState(false)\r\n\r\n  const handleClickShowPassword = () => setShowPassword(!showPassword)\r\n\r\n  return (\r\n    <CustomInput\r\n      type={showPassword ? 'text' : 'password'}\r\n      value={value}\r\n      InputProps={{\r\n        endAdornment: (\r\n          <InputAdornment position={'end'}>\r\n            {value && (\r\n              <IconButton aria-label=\"toggle password visibility\" onClick={handleClickShowPassword}>\r\n                {showPassword ? <VisibilityOff /> : <Visibility />}\r\n              </IconButton>\r\n            )}\r\n          </InputAdornment>\r\n        ),\r\n      }}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"setPasswordContainer\":\"NewPassword_setPasswordContainer__z8PhN\",\"setPassword__form\":\"NewPassword_setPassword__form__bS8Pj\",\"setPassword__title\":\"NewPassword_setPassword__title__38NUD\",\"setPassword__text\":\"NewPassword_setPassword__text__5xHzC\"};","import * as React from 'react'\r\n\r\nimport { useFormik } from 'formik'\r\nimport { useNavigate, useParams } from 'react-router'\r\n\r\nimport { CustomButton } from '../../../common/components/CustomButton/CustomButton'\r\nimport { CustomPasswordInput } from '../../../common/components/CustomPasswordInput/CustomPasswordInput'\r\nimport { PATH } from '../../../constants/routePaths.enum'\r\nimport { useAppDispatch, useAppSelector } from '../../../hooks/reduxHooks'\r\nimport { validationSchemaNewPassword } from '../../../utils/validationSchema'\r\nimport { createPasswordTC } from '../authSlice'\r\n\r\nimport s from './NewPassword.module.scss'\r\n\r\nexport const NewPassword = () => {\r\n  const navigate = useNavigate()\r\n  const dispatch = useAppDispatch()\r\n  const { token } = useParams()\r\n  const passwordIsChanged = useAppSelector(state => state.auth.passwordIsChanged)\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      password: '',\r\n    },\r\n    validationSchema: validationSchemaNewPassword,\r\n    onSubmit: values => {\r\n      console.log(token)\r\n      dispatch(createPasswordTC({ password: values.password, resetPasswordToken: token! }))\r\n    },\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    if (passwordIsChanged) {\r\n      formik.resetForm()\r\n      navigate(PATH.LOGIN)\r\n    }\r\n  }, [passwordIsChanged])\r\n\r\n  return (\r\n    <>\r\n      <div className={s.setPasswordContainer}>\r\n        <h2 className={s.setPassword__title}>create new password</h2>\r\n        <form className={s.setPassword__form} onSubmit={formik.handleSubmit}>\r\n          <CustomPasswordInput\r\n            label=\"password\"\r\n            error={formik.touched.password && !!formik.errors.password}\r\n            helperText={formik.touched.password && formik.errors.password}\r\n            {...formik.getFieldProps('password')}\r\n          />\r\n          <p className={s.setPassword__text}>\r\n            create new password and we will send you further instructions to email\r\n          </p>\r\n          <CustomButton>\r\n            <p>create new password</p>\r\n          </CustomButton>\r\n        </form>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import * as yup from 'yup'\r\n\r\nconst name = yup.string().required('required')\r\nconst avatar = name\r\nconst email = yup.string().email('enter a valid email').required('email is required')\r\nconst password = yup\r\n  .string()\r\n  .min(8, 'password must contain at least 8 characters')\r\n  .required('enter your password')\r\nconst confirmPassword = yup\r\n  .string()\r\n  .oneOf([yup.ref('password')], 'password does not match')\r\n  .required('confirm your password')\r\nconst rememberMe = yup.boolean()\r\n\r\nexport const validationSchemaLogin = yup.object({ email, password, rememberMe })\r\n\r\nexport const validationSchemaRegistration = yup.object({ email, password, confirmPassword })\r\n\r\nexport const validationSchemaProfile = yup.object({ name, avatar })\r\n\r\nexport const validationSchemaNewPassword = yup.object({ password })\r\n\r\nexport const validationSchemaForgotPassword = yup.object({ email })\r\n"],"names":["CustomInput","className","helperText","props","finalClass","s","errorText","TextField","variant","type","fullWidth","CustomPasswordInput","value","useState","showPassword","setShowPassword","InputProps","endAdornment","position","onClick","NewPassword","navigate","useNavigate","dispatch","useAppDispatch","token","useParams","passwordIsChanged","useAppSelector","state","auth","formik","useFormik","initialValues","password","validationSchema","validationSchemaNewPassword","onSubmit","values","console","log","createPasswordTC","resetPasswordToken","React","resetForm","PATH","handleSubmit","label","error","touched","errors","getFieldProps","CustomButton","name","yup","required","avatar","email","min","confirmPassword","oneOf","rememberMe","validationSchemaLogin","validationSchemaRegistration","validationSchemaForgotPassword"],"sourceRoot":""}