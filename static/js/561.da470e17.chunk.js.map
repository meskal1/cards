{"version":3,"file":"static/js/561.da470e17.chunk.js","mappings":"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","sources":["webpack://cards/./src/common/components/CustomInput/CustomInput.module.scss?ad3d","common/components/CustomInput/CustomInput.tsx","webpack://cards/./src/features/auth/Recovery/Recovery.module.scss?5874","features/auth/Recovery/Recovery.tsx","utils/validationSchema.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"CustomInput_input__4vgJw\"};","import { FC } from 'react'\r\n\r\nimport { TextField, TextFieldProps } from '@mui/material'\r\n\r\nimport s from './CustomInput.module.scss'\r\n\r\ntype CustomInputPropsType = TextFieldProps & {\r\n  value: string //Use our value to control input and also because value in MUI has unknown type\r\n}\r\n\r\nexport const CustomInput: FC<CustomInputPropsType> = ({ className, helperText, ...props }) => {\r\n  const finalClass = `${s.input} ${className ? className : ''}`\r\n  const errorText = helperText ? helperText : ' '\r\n\r\n  return (\r\n    <TextField\r\n      className={finalClass}\r\n      variant={props.variant || 'standard'}\r\n      type={props.type || 'text'}\r\n      fullWidth={props.fullWidth || true}\r\n      {...props}\r\n      helperText={errorText}\r\n    />\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"forgotPassword\":\"Recovery_forgotPassword__eomcr\",\"form\":\"Recovery_form__+Z1XI\",\"help\":\"Recovery_help__oWZ1a\",\"title\":\"Recovery_title__mo5n8\",\"forgotQuestion\":\"Recovery_forgotQuestion__CSlgv\",\"forgotLink\":\"Recovery_forgotLink__rAn4I\"};","import { useFormik } from 'formik'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\n\r\nimport { RequestStatusType } from '../../../app/appSlice'\r\nimport { CustomButton } from '../../../common/components/CustomButton/CustomButton'\r\nimport { CustomInput } from '../../../common/components/CustomInput/CustomInput'\r\nimport { PATH } from '../../../constants/routePaths.enum'\r\nimport { useAppDispatch, useAppSelector } from '../../../hooks/reduxHooks'\r\nimport { validationSchemaForgotPassword } from '../../../utils/validationSchema'\r\nimport { forgotPasswordTC } from '../authSlice'\r\n\r\nimport s from './Recovery.module.scss'\r\n\r\nexport const Recovery = () => {\r\n  const dispatch = useAppDispatch()\r\n  const navigate = useNavigate()\r\n  const authStatus = useAppSelector<RequestStatusType>(state => state.auth.status)\r\n\r\n  const { handleSubmit, getFieldProps, errors, touched } = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n    },\r\n    validationSchema: validationSchemaForgotPassword,\r\n    onSubmit: async values => {\r\n      const isForgotPasswordSucceeded = await dispatch(forgotPasswordTC(values.email))\r\n\r\n      if (isForgotPasswordSucceeded.payload) {\r\n        navigate(PATH.CHECK_EMAIL)\r\n      }\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className={s.forgotPassword}>\r\n      <h2 className={s.title}>Forgot your password?</h2>\r\n      <form className={s.form} onSubmit={handleSubmit}>\r\n        <CustomInput\r\n          label={'Email'}\r\n          error={!!errors.email && touched.email}\r\n          helperText={touched.email && errors.email}\r\n          {...getFieldProps('email')}\r\n        />\r\n        <p className={s.help}>Enter your email address and we will send you further instructions</p>\r\n        <CustomButton disabled={authStatus === 'loading'} fullWidth>\r\n          <p>Send instructions</p>\r\n        </CustomButton>\r\n      </form>\r\n      <p className={s.forgotQuestion}>Have you remembered your password?</p>\r\n      <Link className={s.forgotLink} to={PATH.LOGIN}>\r\n        Try logging in\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n","import * as yup from 'yup'\r\n\r\nconst name = yup.string().required('Required')\r\nconst avatar = name\r\nconst email = yup.string().email('Enter a valid email').required('Email is required')\r\nconst password = yup\r\n  .string()\r\n  .min(8, 'Password must contain at least 8 characters')\r\n  .required('Enter your password')\r\nconst confirmPassword = yup\r\n  .string()\r\n  .oneOf([yup.ref('password')], 'Password does not match')\r\n  .required('Confirm your password')\r\nconst rememberMe = yup.boolean()\r\nconst question = yup\r\n  .string()\r\n  .max(100, 'Question should be less then 100 characters')\r\n  .required('Question is required')\r\nconst answer = yup\r\n  .string()\r\n  .max(100, 'Answer should be less then 100 characters')\r\n  .required('Answer is required')\r\nconst packName = yup\r\n  .string()\r\n  .max(100, 'Name should be less then 100 characters')\r\n  .required('Pack name is required')\r\n\r\nexport const validationSchemaLogin = yup.object({ email, password, rememberMe })\r\n\r\nexport const validationSchemaRegistration = yup.object({ email, password, confirmPassword })\r\n\r\nexport const validationSchemaProfile = yup.object({ name, avatar })\r\n\r\nexport const validationSchemaNewPassword = yup.object({ password })\r\n\r\nexport const validationSchemaForgotPassword = yup.object({ email })\r\n\r\nexport const validationSchemaNewCardText = yup.object({ question, answer })\r\n\r\nexport const validationSchemaNewPackText = yup.object({ name: packName })\r\n\r\nexport const validateImage = (imgData: ValidateImageType) => {\r\n  const formats = ['image/jpeg', 'image/png', 'image/jpg', 'image/gif', 'image/webp']\r\n  const error: { questionImg?: string; deckCover?: string } = {}\r\n\r\n  if (imgData.selectedItem && !imgData.size && !imgData.isImageExist) {\r\n    error.questionImg = 'Question image is required'\r\n\r\n    return error\r\n  }\r\n\r\n  if (imgData.type && !new RegExp(imgData.type, 'gi').test(formats.join(','))) {\r\n    error.questionImg = 'Unsupported file format'\r\n    error.deckCover = 'Unsupported file format'\r\n\r\n    return error\r\n  }\r\n\r\n  if (imgData.size && imgData.size > 100000) {\r\n    error.questionImg = 'File size is more than 100kb'\r\n    error.deckCover = 'File size is more than 100kb'\r\n\r\n    return error\r\n  }\r\n\r\n  return error\r\n}\r\n\r\ntype ValidateImageType = {\r\n  size: number\r\n  type: string\r\n  selectedItem?: boolean\r\n  isImageExist: boolean\r\n}\r\n"],"names":["CustomInput","className","helperText","props","finalClass","s","errorText","TextField","variant","type","fullWidth","Recovery","dispatch","useAppDispatch","navigate","useNavigate","authStatus","useAppSelector","state","auth","status","useFormik","initialValues","email","validationSchema","validationSchemaForgotPassword","onSubmit","values","forgotPasswordTC","payload","PATH","handleSubmit","getFieldProps","errors","touched","label","error","CustomButton","disabled","to","name","yup","required","avatar","password","min","confirmPassword","oneOf","rememberMe","question","max","answer","packName","validationSchemaLogin","validationSchemaRegistration","validationSchemaNewPassword","validationSchemaNewCardText","validationSchemaNewPackText","validateImage","imgData","selectedItem","size","isImageExist","RegExp","test","join","questionImg","deckCover"],"sourceRoot":""}