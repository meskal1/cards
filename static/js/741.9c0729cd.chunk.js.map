{"version":3,"file":"static/js/741.9c0729cd.chunk.js","mappings":"+KACA,EAAwB,2B,sCCSXA,EAA8C,SAAH,GAIjD,IAHLC,EAAS,EAATA,UACAC,EAAU,EAAVA,WACGC,GAAK,YAEFC,EAAU,UAAMC,EAAO,YAAIJ,GAAwB,IACnDK,EAAYJ,GAA0B,IAE5C,OACE,SAACK,EAAA,GAAS,gBACRN,UAAWG,EACXI,QAASL,EAAMK,SAAW,WAC1BC,KAAMN,EAAMM,MAAQ,OACpBC,UAAWP,EAAMO,YAAa,GAC1BP,GAAK,IACTD,WAAYI,IAGlB,C,+KChBaK,EAA8D,SAAH,GAIjE,IAHLC,EAAK,EAALA,MAEGT,GADC,EAAJM,MACQ,aAER,GAAwCI,EAAAA,EAAAA,WAAS,GAAM,eAAhDC,EAAY,KAAEC,EAAe,KAIpC,OACE,SAAC,KAAW,QACVN,KAAMK,EAAe,OAAS,WAC9BF,MAAOA,EACPI,WAAY,CACVC,cACE,SAAC,IAAc,CAACC,SAAU,MAAM,SAC7BN,IACC,SAAC,IAAU,CAAC,aAAW,6BAA6BO,QAVhC,WAAH,OAASJ,GAAiBD,EAAa,EAU6B,SAClFA,GAAe,SAAC,IAAa,KAAM,SAAC,IAAU,UAMrDX,GAGV,C,8MCtCA,EAA+B,mCAA/B,EAAyE,2BAAzE,EAA4G,4BAA5G,EAAiJ,6BAAjJ,EAA+L,qCAA/L,EAAiP,iC,SCapOiB,EAAe,WAC1B,IAAMC,GAAaC,EAAAA,EAAAA,IAAkC,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,MAAM,IACzEC,GAAWC,EAAAA,EAAAA,KACXC,GAAWC,EAAAA,EAAAA,MAEjB,GAAyDC,EAAAA,EAAAA,IAAU,CACjEC,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,gBAAiB,IAEnBC,iBAAkBC,EAAAA,GAClBC,SAAS,WAAD,8BAAE,WAAMC,GAAM,sFACYZ,GAC9Ba,EAAAA,EAAAA,IAAW,CAAEP,MAAOM,EAAON,MAAOC,SAAUK,EAAOL,YACpD,OAFsB,QAKrBL,EAASY,EAAAA,EAAAA,OACV,2CACF,mDARQ,KAPHC,EAAY,EAAZA,aAAcC,EAAa,EAAbA,cAAeC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAkB7C,OACE,iBAAK3C,UAAWI,EAAe,WAC7B,eAAIJ,UAAWI,EAAQ,sBACvB,kBAAMJ,UAAWI,EAAQgC,SAAUI,EAAa,WAC9C,SAACzC,EAAA,GAAW,QACV6C,MAAO,QACPnC,WAAS,EACToC,aAAc,eACdC,QAASJ,EAAOX,OAASY,EAAQZ,MACjC9B,WAAY0C,EAAQZ,OAASW,EAAOX,OAChCU,EAAc,YAEpB,SAAC/B,EAAA,GAAmB,QAClBkC,MAAO,WACPC,aAAc,eACdC,QAASJ,EAAOV,UAAYW,EAAQX,SACpC/B,WAAY0C,EAAQX,UAAYU,EAAOV,UACnCS,EAAc,eAEpB,SAAC/B,EAAA,GAAmB,QAClBkC,MAAO,mBACPC,aAAc,eACdC,QAASJ,EAAOT,iBAAmBU,EAAQV,gBAC3ChC,WAAY0C,EAAQV,iBAAmBS,EAAOT,iBAC1CQ,EAAc,sBAEpB,SAACM,EAAA,EAAY,CAAC/C,UAAWI,EAAUK,WAAS,EAACuC,SAAyB,YAAf5B,EAAyB,UAC9E,yCAGJ,cAAGpB,UAAWI,EAAiB,uCAC/B,SAAC,KAAI,CAACJ,UAAWI,EAAc6C,GAAIV,EAAAA,EAAAA,MAAW,uBAKpD,C,8ICvEMW,EAAOC,EAAAA,KAAaC,SAAS,YAC7BC,EAASH,EACTnB,EAAQoB,EAAAA,KAAapB,MAAM,uBAAuBqB,SAAS,qBAC3DpB,EAAWmB,EAAAA,KAEdG,IAAI,EAAG,+CACPF,SAAS,uBACNnB,EAAkBkB,EAAAA,KAErBI,MAAM,CAACJ,EAAAA,GAAQ,aAAc,2BAC7BC,SAAS,yBACNI,EAAaL,EAAAA,KAENM,EAAwBN,EAAAA,GAAW,CAAEpB,MAAAA,EAAOC,SAAAA,EAAUwB,WAAAA,IAEtDrB,EAA+BgB,EAAAA,GAAW,CAAEpB,MAAAA,EAAOC,SAAAA,EAAUC,gBAAAA,IAI7DyB,GAF0BP,EAAAA,GAAW,CAAED,KAAAA,EAAMG,OAAAA,IAEfF,EAAAA,GAAW,CAAEnB,SAAAA,KAE3C2B,EAAiCR,EAAAA,GAAW,CAAEpB,MAAAA,G","sources":["webpack://cards/./src/common/components/CustomInput/CustomInput.module.scss?ad3d","common/components/CustomInput/CustomInput.tsx","common/components/CustomPasswordInput/CustomPasswordInput.tsx","webpack://cards/./src/features/auth/Registration/Registration.module.scss?9b1d","features/auth/Registration/Registration.tsx","utils/validationSchema.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"CustomInput_input__ab1ub\"};","import React from 'react'\r\n\r\nimport { TextField, TextFieldProps } from '@mui/material'\r\n\r\nimport s from './CustomInput.module.scss'\r\n\r\ntype CustomInputPropsType = TextFieldProps & {\r\n  value: string //Use our value to control input and also because value in MUI has unknown type\r\n}\r\n\r\nexport const CustomInput: React.FC<CustomInputPropsType> = ({\r\n  className,\r\n  helperText,\r\n  ...props\r\n}) => {\r\n  const finalClass = `${s.input} ${className ? className : ''}`\r\n  const errorText = helperText ? helperText : ' '\r\n\r\n  return (\r\n    <TextField\r\n      className={finalClass}\r\n      variant={props.variant || 'standard'}\r\n      type={props.type || 'text'}\r\n      fullWidth={props.fullWidth || true}\r\n      {...props}\r\n      helperText={errorText}\r\n    />\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nimport Visibility from '@mui/icons-material/Visibility'\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff'\r\nimport { IconButton, InputAdornment, TextFieldProps } from '@mui/material'\r\n\r\nimport { CustomInput } from '../CustomInput/CustomInput'\r\n\r\ntype CustomPasswordInputPropsType = TextFieldProps & {\r\n  value: string //Use our value to control input and also because value in MUI has unknown type\r\n}\r\n\r\nexport const CustomPasswordInput: React.FC<CustomPasswordInputPropsType> = ({\r\n  value,\r\n  type,\r\n  ...props\r\n}) => {\r\n  const [showPassword, setShowPassword] = useState(false)\r\n\r\n  const handleClickShowPassword = () => setShowPassword(!showPassword)\r\n\r\n  return (\r\n    <CustomInput\r\n      type={showPassword ? 'text' : 'password'}\r\n      value={value}\r\n      InputProps={{\r\n        endAdornment: (\r\n          <InputAdornment position={'end'}>\r\n            {value && (\r\n              <IconButton aria-label=\"toggle password visibility\" onClick={handleClickShowPassword}>\r\n                {showPassword ? <VisibilityOff /> : <Visibility />}\r\n              </IconButton>\r\n            )}\r\n          </InputAdornment>\r\n        ),\r\n      }}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"registration\":\"Registration_registration__F2sjS\",\"form\":\"Registration_form__sZa7E\",\"title\":\"Registration_title__LVSwi\",\"button\":\"Registration_button__89Wig\",\"signInQuestion\":\"Registration_signInQuestion__XZANr\",\"signInLink\":\"Registration_signInLink__xJbtP\"};","import { useFormik } from 'formik'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\n\r\nimport { RequestStatusType } from '../../../app/appSlice'\r\nimport { CustomButton } from '../../../common/components/CustomButton/CustomButton'\r\nimport { CustomInput } from '../../../common/components/CustomInput/CustomInput'\r\nimport { CustomPasswordInput } from '../../../common/components/CustomPasswordInput/CustomPasswordInput'\r\nimport { PATH } from '../../../constants/routePaths.enum'\r\nimport { useAppDispatch, useAppSelector } from '../../../hooks/reduxHooks'\r\nimport { validationSchemaRegistration } from '../../../utils/validationSchema'\r\nimport { registerTC } from '../authSlice'\r\n\r\nimport s from './Registration.module.scss'\r\n\r\nexport const Registration = () => {\r\n  const authStatus = useAppSelector<RequestStatusType>(state => state.auth.status)\r\n  const dispatch = useAppDispatch()\r\n  const navigate = useNavigate()\r\n\r\n  const { handleSubmit, getFieldProps, errors, touched } = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      confirmPassword: '',\r\n    },\r\n    validationSchema: validationSchemaRegistration,\r\n    onSubmit: async values => {\r\n      const isRegisterSucceed = await dispatch(\r\n        registerTC({ email: values.email, password: values.password })\r\n      )\r\n\r\n      if (isRegisterSucceed) {\r\n        navigate(PATH.LOGIN)\r\n      }\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className={s.registration}>\r\n      <h2 className={s.title}>sign up</h2>\r\n      <form className={s.form} onSubmit={handleSubmit}>\r\n        <CustomInput\r\n          label={'email'}\r\n          fullWidth\r\n          autoComplete={'new-password'}\r\n          error={!!errors.email && touched.email}\r\n          helperText={touched.email && errors.email}\r\n          {...getFieldProps('email')}\r\n        />\r\n        <CustomPasswordInput\r\n          label={'password'}\r\n          autoComplete={'new-password'}\r\n          error={!!errors.password && touched.password}\r\n          helperText={touched.password && errors.password}\r\n          {...getFieldProps('password')}\r\n        />\r\n        <CustomPasswordInput\r\n          label={'confirm password'}\r\n          autoComplete={'new-password'}\r\n          error={!!errors.confirmPassword && touched.confirmPassword}\r\n          helperText={touched.confirmPassword && errors.confirmPassword}\r\n          {...getFieldProps('confirmPassword')}\r\n        />\r\n        <CustomButton className={s.button} fullWidth disabled={authStatus === 'loading'}>\r\n          <p>sign up</p>\r\n        </CustomButton>\r\n      </form>\r\n      <p className={s.signInQuestion}>already have an account?</p>\r\n      <Link className={s.signInLink} to={PATH.LOGIN}>\r\n        sign in\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n","import * as yup from 'yup'\r\n\r\nconst name = yup.string().required('required')\r\nconst avatar = name\r\nconst email = yup.string().email('enter a valid email').required('email is required')\r\nconst password = yup\r\n  .string()\r\n  .min(8, 'password must contain at least 8 characters')\r\n  .required('enter your password')\r\nconst confirmPassword = yup\r\n  .string()\r\n  .oneOf([yup.ref('password')], 'password does not match')\r\n  .required('confirm your password')\r\nconst rememberMe = yup.boolean()\r\n\r\nexport const validationSchemaLogin = yup.object({ email, password, rememberMe })\r\n\r\nexport const validationSchemaRegistration = yup.object({ email, password, confirmPassword })\r\n\r\nexport const validationSchemaProfile = yup.object({ name, avatar })\r\n\r\nexport const validationSchemaNewPassword = yup.object({ password })\r\n\r\nexport const validationSchemaForgotPassword = yup.object({ email })\r\n"],"names":["CustomInput","className","helperText","props","finalClass","s","errorText","TextField","variant","type","fullWidth","CustomPasswordInput","value","useState","showPassword","setShowPassword","InputProps","endAdornment","position","onClick","Registration","authStatus","useAppSelector","state","auth","status","dispatch","useAppDispatch","navigate","useNavigate","useFormik","initialValues","email","password","confirmPassword","validationSchema","validationSchemaRegistration","onSubmit","values","registerTC","PATH","handleSubmit","getFieldProps","errors","touched","label","autoComplete","error","CustomButton","disabled","to","name","yup","required","avatar","min","oneOf","rememberMe","validationSchemaLogin","validationSchemaNewPassword","validationSchemaForgotPassword"],"sourceRoot":""}