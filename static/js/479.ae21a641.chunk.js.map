{"version":3,"file":"static/js/479.ae21a641.chunk.js","mappings":"yUACA,EAAiC,iCAAjC,EAAiF,+BAAjF,EAA8H,8BAA9H,EAAmL,uCAAnL,EAAiP,uCAAjP,EAA4S,oCAA5S,EAAwW,wCAAxW,EAAqa,qCAAra,EAAwd,8BAAxd,EAAsgB,gCAAtgB,EAAijB,2B,SCiBpiBA,EAAW,WACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KACXC,GAAaC,EAAAA,EAAAA,IAAkC,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,MAAM,IAEzEC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEdC,iBAAkBC,EAAAA,GAClBC,SAAS,WAAD,8BAAE,WAAMC,GAAM,sFACShB,GAASiB,EAAAA,EAAAA,IAAQD,IAAQ,OAAlC,QAGlBlB,EAASoB,EAAAA,EAAAA,OACV,2CACF,mDANQ,KASX,OACE,+BACE,iBAAKC,UAAWC,EAAiB,WAC/B,eAAID,UAAWC,EAAe,sBAC9B,kBAAMD,UAAWC,EAAeL,SAAUR,EAAOc,aAAa,WAC5D,SAACC,EAAA,GAAW,QACVC,MAAM,QACNC,MAAOjB,EAAOkB,QAAQf,SAAWH,EAAOmB,OAAOhB,MAC/CiB,WAAYpB,EAAOkB,QAAQf,OAASH,EAAOmB,OAAOhB,OAC9CH,EAAOqB,cAAc,YAG3B,SAACC,EAAA,GAAmB,QAClBN,MAAM,WACNC,MAAOjB,EAAOkB,QAAQd,YAAcJ,EAAOmB,OAAOf,SAClDgB,WAAYpB,EAAOkB,QAAQd,UAAYJ,EAAOmB,OAAOf,UACjDJ,EAAOqB,cAAc,eAG3B,iBAAKT,UAAWC,EAAuB,WACrC,SAACU,EAAA,EAAgB,CACfX,UAAWC,EACXG,OAAO,SAACQ,EAAA,EAAU,CAACZ,UAAWC,EAAoB,yBAClDY,SACE,SAACC,EAAA,GAAQ,kBACH1B,EAAOqB,cAAc,eAAa,IACtCT,UAAWC,EACXc,QAAS3B,EAAOS,OAAOJ,WACvBuB,KAAK,SACLC,MAAO7B,EAAOS,OAAOJ,WAAa,CAAEyB,MAAO,YAAe,CAAEA,MAAO,SACnEC,MAAM,SAACC,EAAA,EAAwB,IAC/BC,aAAa,SAACC,EAAA,EAAW,UAK/B,SAAC,KAAI,CAACtB,UAAWC,EAAyBsB,GAAIxB,EAAAA,EAAAA,SAAc,kCAK9D,SAACyB,EAAA,EAAY,CAACC,SAAyB,YAAf1C,EAAyB,UAC/C,yCAIJ,iBAAKiB,UAAWC,EAAqB,WACnC,cAAGD,UAAWC,EAAc,uCAC5B,SAAC,KAAI,CAACD,UAAWC,EAAiBsB,GAAIxB,EAAAA,EAAAA,aAAkB,4BAOlE,C,2LC5FO,SAAS2B,EAAkCC,GAChD,OAAOC,EAAAA,EAAAA,GAAqB,sBAAuBD,EACrD,CACA,IACA,GADgCE,EAAAA,EAAAA,GAAuB,sBAAuB,CAAC,OAAQ,sBAAuB,oBAAqB,uBAAwB,WAAY,QAAS,U,iBCH1KC,EAAY,CAAC,UAAW,YAAa,kBAAmB,UAAW,WAAY,oBAAqB,WAAY,QAAS,iBAAkB,OAAQ,WAAY,YAAa,SA4BrKC,GAAuBC,EAAAA,EAAAA,IAAO,QAAS,CAClDC,KAAM,sBACNN,KAAM,OACNO,kBAAmB,SAACC,EAAOC,GACzB,IACEC,EACEF,EADFE,WAEF,MAAO,EAAC,uBACCC,EAAAA,OAAkCF,EAAOhC,OAC/CgC,EAAOG,KAAMH,EAAO,iBAAD,QAAkBI,EAAAA,EAAAA,GAAWH,EAAWI,kBAChE,GAVkCT,EAWjC,gBACDU,EAAK,EAALA,MACAL,EAAU,EAAVA,WAAU,OACNM,EAAAA,EAAAA,IAAS,QACbC,QAAS,cACTC,WAAY,SACZC,OAAQ,UAERC,cAAe,SACfC,wBAAyB,cACzBC,YAAa,GACbC,YAAa,IAAE,YAETZ,EAAAA,UAAqC,CACzCQ,OAAQ,YAEqB,UAA9BT,EAAWI,gBAA8B,CAC1CU,cAAe,cACfF,WAAY,GAEZC,aAAc,IACiB,QAA9Bb,EAAWI,gBAA4B,CACxCU,cAAe,iBACfF,WAAY,IACmB,WAA9BZ,EAAWI,gBAA+B,CAC3CU,cAAe,SACfF,WAAY,KACX,uBACMX,EAAAA,QAA6B,sBAC5BA,EAAAA,UAAqC,CACzCpB,OAAQwB,EAAMU,MAAQV,GAAOW,QAAQC,KAAK7B,YAG9C,IAgJF,EA1IsC8B,EAAAA,YAAiB,SAA0BC,EAASC,GACxF,IAAIC,EACEvB,GAAQwB,EAAAA,EAAAA,GAAc,CAC1BxB,MAAOqB,EACPvB,KAAM,wBAGJjC,EAQEmC,EARFnC,UAAS,EAQPmC,EAPFyB,gBAAAA,OAAe,IAAG,GAAC,EAAC,EACpB/C,EAMEsB,EANFtB,QACUgD,EAKR1B,EALFV,SACAqC,EAIE3B,EAJF2B,kBACOC,EAGL5B,EAHF/B,MAAK,EAGH+B,EAFFM,eAAAA,OAAc,IAAG,QAAK,IAEpBN,EADF6B,UAAAA,OAAS,IAAG,GAAC,EAAC,EAEhBC,GAAQC,EAAAA,EAAAA,GAA8B/B,EAAOL,GACzCqC,GAAiBC,EAAAA,EAAAA,KACnB3C,EAAWoC,EACS,qBAAbpC,GAA8D,qBAA3BZ,EAAQsB,MAAMV,WAC1DA,EAAWZ,EAAQsB,MAAMV,UAEH,qBAAbA,GAA4B0C,IACrC1C,EAAW0C,EAAe1C,UAE5B,IAAM4C,EAAe,CACnB5C,SAAAA,GAEF,CAAC,UAAW,OAAQ,WAAY,QAAS,YAAY6C,SAAQ,SAAAC,GACzB,qBAAvB1D,EAAQsB,MAAMoC,IAA8C,qBAAfpC,EAAMoC,KAC5DF,EAAaE,GAAOpC,EAAMoC,GAE9B,IACA,IAAMC,GAAMC,EAAAA,EAAAA,GAAiB,CAC3BtC,MAAAA,EACAgC,eAAAA,EACAO,OAAQ,CAAC,WAELrC,GAAaM,EAAAA,EAAAA,GAAS,CAAC,EAAGR,EAAO,CACrCV,SAAAA,EACAgB,eAAAA,EACApC,MAAOmE,EAAInE,QAEPsE,EA1GkB,SAAAtC,GACxB,IACEsC,EAIEtC,EAJFsC,QACAlD,EAGEY,EAHFZ,SACAgB,EAEEJ,EAFFI,eACApC,EACEgC,EADFhC,MAEIuE,EAAQ,CACZrC,KAAM,CAAC,OAAQd,GAAY,WAAY,iBAAF,QAAmBe,EAAAA,EAAAA,GAAWC,IAAmBpC,GAAS,SAC/FD,MAAO,CAAC,QAASqB,GAAY,aAE/B,OAAOoD,EAAAA,EAAAA,GAAeD,EAAOlD,EAAmCiD,EAClE,CA8FkBG,CAAkBzC,GAC5B0C,EAAwE,OAAjDrB,EAAwBM,EAAUgB,YAAsBtB,EAAwBE,EAAgBoB,WACzH5E,EAAQ2D,EASZ,OARa,MAAT3D,GAAiBA,EAAM6E,OAASrE,EAAAA,GAAekD,IACjD1D,GAAqB8E,EAAAA,EAAAA,KAAKtE,EAAAA,GAAY+B,EAAAA,EAAAA,GAAS,CAC7CwC,UAAW,QACVJ,EAAqB,CACtB/E,WAAWoF,EAAAA,EAAAA,GAAKT,EAAQvE,MAA8B,MAAvB2E,OAA8B,EAASA,EAAoB/E,WAC1FqF,SAAUjF,OAGMkF,EAAAA,EAAAA,MAAMvD,GAAsBY,EAAAA,EAAAA,GAAS,CACvD3C,WAAWoF,EAAAA,EAAAA,GAAKT,EAAQpC,KAAMvC,GAC9BqC,WAAYA,EACZoB,IAAKA,GACJQ,EAAO,CACRoB,SAAU,CAAc9B,EAAAA,aAAmB1C,EAASwD,GAAejE,KAEvE,G","sources":["webpack://cards/./src/features/auth/LogInApp/LogInApp.module.scss?7c08","features/auth/LogInApp/LogInApp.tsx","../node_modules/@mui/material/esm/FormControlLabel/formControlLabelClasses.js","../node_modules/@mui/material/esm/FormControlLabel/FormControlLabel.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginContainer\":\"LogInApp_loginContainer__ytUUQ\",\"login__title\":\"LogInApp_login__title__RfdQk\",\"login__form\":\"LogInApp_login__form__SE9zN\",\"login__blockRemember\":\"LogInApp_login__blockRemember__bF8JE\",\"login__checkBoxBlock\":\"LogInApp_login__checkBoxBlock__sseNN\",\"login__typography\":\"LogInApp_login__typography__BS5tL\",\"login__forgotPassword\":\"LogInApp_login__forgotPassword__Cblo7\",\"login__signUpBlock\":\"LogInApp_login__signUpBlock__8r8LS\",\"login__text\":\"LogInApp_login__text__UvvGQ\",\"login__signUp\":\"LogInApp_login__signUp__UiTY5\",\"checkbox\":\"LogInApp_checkbox__23mWi\"};","import RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked'\r\nimport TaskAltIcon from '@mui/icons-material/TaskAlt'\r\nimport { FormControlLabel, Typography } from '@mui/material'\r\nimport Checkbox from '@mui/material/Checkbox'\r\nimport { useFormik } from 'formik'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\n\r\nimport { RequestStatusType } from '../../../app/appSlice'\r\nimport { CustomButton } from '../../../common/components/CustomButton/CustomButton'\r\nimport { CustomInput } from '../../../common/components/CustomInput/CustomInput'\r\nimport { CustomPasswordInput } from '../../../common/components/CustomPasswordInput/CustomPasswordInput'\r\nimport { PATH } from '../../../constants/routePaths.enum'\r\nimport { useAppDispatch, useAppSelector } from '../../../hooks/reduxHooks'\r\nimport { validationSchemaLogin } from '../../../utils/validationSchema'\r\nimport { logInTC } from '../authSlice'\r\n\r\nimport s from './LogInApp.module.scss'\r\n\r\nexport const LogInApp = () => {\r\n  const navigate = useNavigate()\r\n  const dispatch = useAppDispatch()\r\n  const authStatus = useAppSelector<RequestStatusType>(state => state.auth.status)\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false,\r\n    },\r\n    validationSchema: validationSchemaLogin,\r\n    onSubmit: async values => {\r\n      const isLoginSucceed = await dispatch(logInTC(values))\r\n\r\n      if (isLoginSucceed) {\r\n        navigate(PATH.PACKS)\r\n      }\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <div className={s.loginContainer}>\r\n        <h2 className={s.login__title}>Sign in</h2>\r\n        <form className={s.login__form} onSubmit={formik.handleSubmit}>\r\n          <CustomInput\r\n            label=\"Email\"\r\n            error={formik.touched.email && !!formik.errors.email}\r\n            helperText={formik.touched.email && formik.errors.email}\r\n            {...formik.getFieldProps('email')}\r\n          />\r\n\r\n          <CustomPasswordInput\r\n            label=\"Password\"\r\n            error={formik.touched.password && !!formik.errors.password}\r\n            helperText={formik.touched.password && formik.errors.password}\r\n            {...formik.getFieldProps('password')}\r\n          />\r\n\r\n          <div className={s.login__blockRemember}>\r\n            <FormControlLabel\r\n              className={s.login__checkBoxBlock}\r\n              label={<Typography className={s.login__typography}>Remember me</Typography>}\r\n              control={\r\n                <Checkbox\r\n                  {...formik.getFieldProps('rememberMe')}\r\n                  className={s.checkbox}\r\n                  checked={formik.values.rememberMe}\r\n                  size=\"medium\"\r\n                  style={formik.values.rememberMe ? { color: '#1B79CE ' } : { color: 'grey ' }}\r\n                  icon={<RadioButtonUncheckedIcon />}\r\n                  checkedIcon={<TaskAltIcon />}\r\n                />\r\n              }\r\n            />\r\n\r\n            <Link className={s.login__forgotPassword} to={PATH.RECOVERY}>\r\n              Forgot password?\r\n            </Link>\r\n          </div>\r\n\r\n          <CustomButton disabled={authStatus === 'loading'}>\r\n            <p>Sign in</p>\r\n          </CustomButton>\r\n        </form>\r\n\r\n        <div className={s.login__signUpBlock}>\r\n          <p className={s.login__text}>Already have an account?</p>\r\n          <Link className={s.login__signUp} to={PATH.REGISTRATION}>\r\n            Sign up\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getFormControlLabelUtilityClasses(slot) {\n  return generateUtilityClass('MuiFormControlLabel', slot);\n}\nconst formControlLabelClasses = generateUtilityClasses('MuiFormControlLabel', ['root', 'labelPlacementStart', 'labelPlacementTop', 'labelPlacementBottom', 'disabled', 'label', 'error']);\nexport default formControlLabelClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checked\", \"className\", \"componentsProps\", \"control\", \"disabled\", \"disableTypography\", \"inputRef\", \"label\", \"labelPlacement\", \"name\", \"onChange\", \"slotProps\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useFormControl } from '../FormControl';\nimport Typography from '../Typography';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport formControlLabelClasses, { getFormControlLabelUtilityClasses } from './formControlLabelClasses';\nimport formControlState from '../FormControl/formControlState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disabled,\n    labelPlacement,\n    error\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', `labelPlacement${capitalize(labelPlacement)}`, error && 'error'],\n    label: ['label', disabled && 'disabled']\n  };\n  return composeClasses(slots, getFormControlLabelUtilityClasses, classes);\n};\nexport const FormControlLabelRoot = styled('label', {\n  name: 'MuiFormControlLabel',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${formControlLabelClasses.label}`]: styles.label\n    }, styles.root, styles[`labelPlacement${capitalize(ownerState.labelPlacement)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  display: 'inline-flex',\n  alignItems: 'center',\n  cursor: 'pointer',\n  // For correct alignment with the text.\n  verticalAlign: 'middle',\n  WebkitTapHighlightColor: 'transparent',\n  marginLeft: -11,\n  marginRight: 16,\n  // used for row presentation of radio/checkbox\n  [`&.${formControlLabelClasses.disabled}`]: {\n    cursor: 'default'\n  }\n}, ownerState.labelPlacement === 'start' && {\n  flexDirection: 'row-reverse',\n  marginLeft: 16,\n  // used for row presentation of radio/checkbox\n  marginRight: -11\n}, ownerState.labelPlacement === 'top' && {\n  flexDirection: 'column-reverse',\n  marginLeft: 16\n}, ownerState.labelPlacement === 'bottom' && {\n  flexDirection: 'column',\n  marginLeft: 16\n}, {\n  [`& .${formControlLabelClasses.label}`]: {\n    [`&.${formControlLabelClasses.disabled}`]: {\n      color: (theme.vars || theme).palette.text.disabled\n    }\n  }\n}));\n\n/**\n * Drop-in replacement of the `Radio`, `Switch` and `Checkbox` component.\n * Use this component if you want to display an extra label.\n */\nconst FormControlLabel = /*#__PURE__*/React.forwardRef(function FormControlLabel(inProps, ref) {\n  var _slotProps$typography;\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiFormControlLabel'\n  });\n  const {\n      className,\n      componentsProps = {},\n      control,\n      disabled: disabledProp,\n      disableTypography,\n      label: labelProp,\n      labelPlacement = 'end',\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const muiFormControl = useFormControl();\n  let disabled = disabledProp;\n  if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {\n    disabled = control.props.disabled;\n  }\n  if (typeof disabled === 'undefined' && muiFormControl) {\n    disabled = muiFormControl.disabled;\n  }\n  const controlProps = {\n    disabled\n  };\n  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(key => {\n    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {\n      controlProps[key] = props[key];\n    }\n  });\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['error']\n  });\n  const ownerState = _extends({}, props, {\n    disabled,\n    labelPlacement,\n    error: fcs.error\n  });\n  const classes = useUtilityClasses(ownerState);\n  const typographySlotProps = (_slotProps$typography = slotProps.typography) != null ? _slotProps$typography : componentsProps.typography;\n  let label = labelProp;\n  if (label != null && label.type !== Typography && !disableTypography) {\n    label = /*#__PURE__*/_jsx(Typography, _extends({\n      component: \"span\"\n    }, typographySlotProps, {\n      className: clsx(classes.label, typographySlotProps == null ? void 0 : typographySlotProps.className),\n      children: label\n    }));\n  }\n  return /*#__PURE__*/_jsxs(FormControlLabelRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    children: [/*#__PURE__*/React.cloneElement(control, controlProps), label]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControlLabel.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the component appears selected.\n   */\n  checked: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    typography: PropTypes.object\n  }),\n  /**\n   * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.\n   */\n  control: PropTypes.element.isRequired,\n  /**\n   * If `true`, the control is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label is rendered as it is passed without an additional typography node.\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * A text or an element to be used in an enclosing label element.\n   */\n  label: PropTypes.node,\n  /**\n   * The position of the label.\n   * @default 'end'\n   */\n  labelPlacement: PropTypes.oneOf(['bottom', 'end', 'start', 'top']),\n  /**\n   * @ignore\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    typography: PropTypes.object\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default FormControlLabel;"],"names":["LogInApp","navigate","useNavigate","dispatch","useAppDispatch","authStatus","useAppSelector","state","auth","status","formik","useFormik","initialValues","email","password","rememberMe","validationSchema","validationSchemaLogin","onSubmit","values","logInTC","PATH","className","s","handleSubmit","CustomInput","label","error","touched","errors","helperText","getFieldProps","CustomPasswordInput","FormControlLabel","Typography","control","Checkbox","checked","size","style","color","icon","RadioButtonUnchecked","checkedIcon","TaskAlt","to","CustomButton","disabled","getFormControlLabelUtilityClasses","slot","generateUtilityClass","generateUtilityClasses","_excluded","FormControlLabelRoot","styled","name","overridesResolver","props","styles","ownerState","formControlLabelClasses","root","capitalize","labelPlacement","theme","_extends","display","alignItems","cursor","verticalAlign","WebkitTapHighlightColor","marginLeft","marginRight","flexDirection","vars","palette","text","React","inProps","ref","_slotProps$typography","useThemeProps","componentsProps","disabledProp","disableTypography","labelProp","slotProps","other","_objectWithoutPropertiesLoose","muiFormControl","useFormControl","controlProps","forEach","key","fcs","formControlState","states","classes","slots","composeClasses","useUtilityClasses","typographySlotProps","typography","type","_jsx","component","clsx","children","_jsxs"],"sourceRoot":""}