{"version":3,"file":"static/js/741.3df6a0dd.chunk.js","mappings":"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","sources":["webpack://cards/./src/common/components/CustomInput/CustomInput.module.scss?ad3d","common/components/CustomInput/CustomInput.tsx","common/components/CustomPasswordInput/CustomPasswordInput.tsx","webpack://cards/./src/features/auth/Registration/Registration.module.scss?9b1d","features/auth/Registration/Registration.tsx","utils/validationSchema.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"CustomInput_input__4vgJw\"};","import { FC } from 'react'\r\n\r\nimport { TextField, TextFieldProps } from '@mui/material'\r\n\r\nimport s from './CustomInput.module.scss'\r\n\r\ntype CustomInputPropsType = TextFieldProps & {\r\n  value: string //Use our value to control input and also because value in MUI has unknown type\r\n}\r\n\r\nexport const CustomInput: FC<CustomInputPropsType> = ({ className, helperText, ...props }) => {\r\n  const finalClass = `${s.input} ${className ? className : ''}`\r\n  const errorText = helperText ? helperText : ' '\r\n\r\n  return (\r\n    <TextField\r\n      className={finalClass}\r\n      variant={props.variant || 'standard'}\r\n      type={props.type || 'text'}\r\n      fullWidth={props.fullWidth || true}\r\n      {...props}\r\n      helperText={errorText}\r\n    />\r\n  )\r\n}\r\n","import { useState, FC } from 'react'\r\n\r\nimport Visibility from '@mui/icons-material/Visibility'\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff'\r\nimport { IconButton, InputAdornment, TextFieldProps } from '@mui/material'\r\n\r\nimport { CustomInput } from '../CustomInput/CustomInput'\r\n\r\ntype CustomPasswordInputPropsType = TextFieldProps & {\r\n  value: string //Use our value to control input and also because value in MUI has unknown type\r\n}\r\n\r\nexport const CustomPasswordInput: FC<CustomPasswordInputPropsType> = ({\r\n  value,\r\n  type,\r\n  ...props\r\n}) => {\r\n  const [showPassword, setShowPassword] = useState(false)\r\n\r\n  const handleClickShowPassword = () => setShowPassword(!showPassword)\r\n\r\n  return (\r\n    <CustomInput\r\n      type={showPassword ? 'text' : 'password'}\r\n      value={value}\r\n      InputProps={{\r\n        endAdornment: (\r\n          <InputAdornment position={'end'}>\r\n            {value && (\r\n              <IconButton aria-label=\"toggle password visibility\" onClick={handleClickShowPassword}>\r\n                {showPassword ? <VisibilityOff /> : <Visibility />}\r\n              </IconButton>\r\n            )}\r\n          </InputAdornment>\r\n        ),\r\n      }}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"registration\":\"Registration_registration__EhJcQ\",\"form\":\"Registration_form__qMphv\",\"title\":\"Registration_title__dED7i\",\"button\":\"Registration_button__-w9Ik\",\"signInQuestion\":\"Registration_signInQuestion__FvMQR\",\"signInLink\":\"Registration_signInLink__AfH3w\"};","import { useFormik } from 'formik'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\n\r\nimport { RequestStatusType } from '../../../app/appSlice'\r\nimport { CustomButton } from '../../../common/components/CustomButton/CustomButton'\r\nimport { CustomInput } from '../../../common/components/CustomInput/CustomInput'\r\nimport { CustomPasswordInput } from '../../../common/components/CustomPasswordInput/CustomPasswordInput'\r\nimport { PATH } from '../../../constants/routePaths.enum'\r\nimport { useAppDispatch, useAppSelector } from '../../../hooks/reduxHooks'\r\nimport { validationSchemaRegistration } from '../../../utils/validationSchema'\r\nimport { registerTC } from '../authSlice'\r\n\r\nimport s from './Registration.module.scss'\r\n\r\nexport const Registration = () => {\r\n  const authStatus = useAppSelector<RequestStatusType>(state => state.auth.status)\r\n  const dispatch = useAppDispatch()\r\n  const navigate = useNavigate()\r\n\r\n  const { handleSubmit, getFieldProps, errors, touched } = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      confirmPassword: '',\r\n    },\r\n    validationSchema: validationSchemaRegistration,\r\n    onSubmit: async values => {\r\n      const isRegisterSucceed = await dispatch(\r\n        registerTC({ email: values.email, password: values.password })\r\n      )\r\n\r\n      if (isRegisterSucceed.payload) {\r\n        navigate(PATH.LOGIN)\r\n      }\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className={s.registration}>\r\n      <h2 className={s.title}>Sign up</h2>\r\n      <form className={s.form} onSubmit={handleSubmit}>\r\n        <CustomInput\r\n          label={'Email'}\r\n          fullWidth\r\n          autoComplete={'new-password'}\r\n          error={!!errors.email && touched.email}\r\n          helperText={touched.email && errors.email}\r\n          {...getFieldProps('email')}\r\n        />\r\n        <CustomPasswordInput\r\n          label={'Password'}\r\n          autoComplete={'new-password'}\r\n          error={!!errors.password && touched.password}\r\n          helperText={touched.password && errors.password}\r\n          {...getFieldProps('password')}\r\n        />\r\n        <CustomPasswordInput\r\n          label={'Confirm password'}\r\n          autoComplete={'new-password'}\r\n          error={!!errors.confirmPassword && touched.confirmPassword}\r\n          helperText={touched.confirmPassword && errors.confirmPassword}\r\n          {...getFieldProps('confirmPassword')}\r\n        />\r\n        <CustomButton className={s.button} fullWidth disabled={authStatus === 'loading'}>\r\n          <p>Sign up</p>\r\n        </CustomButton>\r\n      </form>\r\n      <p className={s.signInQuestion}>Already have an account?</p>\r\n      <Link className={s.signInLink} to={PATH.LOGIN}>\r\n        Sign in\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n","import * as yup from 'yup'\r\n\r\nconst name = yup.string().required('Required')\r\nconst avatar = name\r\nconst email = yup.string().email('Enter a valid email').required('Email is required')\r\nconst password = yup\r\n  .string()\r\n  .min(8, 'Password must contain at least 8 characters')\r\n  .required('Enter your password')\r\nconst confirmPassword = yup\r\n  .string()\r\n  .oneOf([yup.ref('password')], 'Password does not match')\r\n  .required('Confirm your password')\r\nconst rememberMe = yup.boolean()\r\nconst question = yup\r\n  .string()\r\n  .max(100, 'Question should be less then 100 characters')\r\n  .required('Question is required')\r\nconst answer = yup\r\n  .string()\r\n  .max(100, 'Answer should be less then 100 characters')\r\n  .required('Answer is required')\r\nconst packName = yup\r\n  .string()\r\n  .max(100, 'Name should be less then 100 characters')\r\n  .required('Pack name is required')\r\n\r\nexport const validationSchemaLogin = yup.object({ email, password, rememberMe })\r\n\r\nexport const validationSchemaRegistration = yup.object({ email, password, confirmPassword })\r\n\r\nexport const validationSchemaProfile = yup.object({ name, avatar })\r\n\r\nexport const validationSchemaNewPassword = yup.object({ password })\r\n\r\nexport const validationSchemaForgotPassword = yup.object({ email })\r\n\r\nexport const validationSchemaNewCardText = yup.object({ question, answer })\r\n\r\nexport const validationSchemaNewPackText = yup.object({ name: packName })\r\n\r\nexport const validateImage = (imgData: ValidateImageType) => {\r\n  const formats = ['image/jpeg', 'image/png', 'image/jpg', 'image/gif', 'image/webp', 'image/svg']\r\n  const error: { questionImg?: string; deckCover?: string } = {}\r\n\r\n  if (imgData.selectedItem && !imgData.size && !imgData.isImageExist) {\r\n    error.questionImg = 'Question image is required'\r\n\r\n    return error\r\n  }\r\n\r\n  if (imgData.type && !new RegExp(imgData.type, 'gi').test(formats.join(','))) {\r\n    error.questionImg = 'Unsupported file format'\r\n    error.deckCover = 'Unsupported file format'\r\n\r\n    return error\r\n  }\r\n\r\n  if (imgData.size && imgData.size > 100000) {\r\n    error.questionImg = 'File size is more than 100kb'\r\n    error.deckCover = 'File size is more than 100kb'\r\n\r\n    return error\r\n  }\r\n\r\n  return error\r\n}\r\n\r\ntype ValidateImageType = {\r\n  size: number\r\n  type: string\r\n  selectedItem?: boolean\r\n  isImageExist: boolean\r\n}\r\n"],"names":["CustomInput","className","helperText","props","finalClass","s","errorText","TextField","variant","type","fullWidth","CustomPasswordInput","value","useState","showPassword","setShowPassword","InputProps","endAdornment","position","onClick","Registration","authStatus","useAppSelector","state","auth","status","dispatch","useAppDispatch","navigate","useNavigate","useFormik","initialValues","email","password","confirmPassword","validationSchema","validationSchemaRegistration","onSubmit","values","registerTC","payload","PATH","handleSubmit","getFieldProps","errors","touched","label","autoComplete","error","CustomButton","disabled","to","name","yup","required","avatar","min","oneOf","rememberMe","question","max","answer","packName","validationSchemaLogin","validationSchemaNewPassword","validationSchemaForgotPassword","validationSchemaNewCardText","validationSchemaNewPackText","validateImage","imgData","selectedItem","size","isImageExist","RegExp","test","join","questionImg","deckCover"],"sourceRoot":""}