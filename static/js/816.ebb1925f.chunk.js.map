{"version":3,"file":"static/js/816.ebb1925f.chunk.js","mappings":"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","sources":["webpack://cards/./src/common/components/CustomInput/CustomInput.module.scss?ad3d","common/components/CustomInput/CustomInput.tsx","../node_modules/@mui/icons-material/esm/CameraAlt.js","../node_modules/@mui/icons-material/esm/Send.js","../node_modules/@mui/icons-material/esm/BorderColor.js","webpack://cards/./src/common/components/EditableSpan/EditableSpan.module.scss?b028","common/components/EditableSpan/EditableSpan.tsx","webpack://cards/./src/features/profile/Profile.module.scss?6070","features/profile/Profile.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"CustomInput_input__ab1ub\"};","import React from 'react'\r\n\r\nimport { TextField, TextFieldProps } from '@mui/material'\r\n\r\nimport s from './CustomInput.module.scss'\r\n\r\ntype CustomInputPropsType = TextFieldProps & {\r\n  value: string //Use our value to control input and also because value in MUI has unknown type\r\n}\r\n\r\nexport const CustomInput: React.FC<CustomInputPropsType> = ({\r\n  className,\r\n  helperText,\r\n  ...props\r\n}) => {\r\n  const finalClass = `${s.input} ${className ? className : ''}`\r\n  const errorText = helperText ? helperText : ' '\r\n\r\n  return (\r\n    <TextField\r\n      className={finalClass}\r\n      variant={props.variant || 'standard'}\r\n      type={props.type || 'text'}\r\n      fullWidth={props.fullWidth || true}\r\n      {...props}\r\n      helperText={errorText}\r\n    />\r\n  )\r\n}\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"circle\", {\n  cx: \"12\",\n  cy: \"12\",\n  r: \"3.2\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 2 7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z\"\n}, \"1\")], 'CameraAlt');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M2.01 21 23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M22 24H2v-4h20v4zM13.06 5.19l3.75 3.75L7.75 18H4v-3.75l9.06-9.06zm4.82 2.68-3.75-3.75 1.83-1.83c.39-.39 1.02-.39 1.41 0l2.34 2.34c.39.39.39 1.02 0 1.41l-1.83 1.83z\"\n}), 'BorderColor');","// extracted by mini-css-extract-plugin\nexport default {\"inputContainer\":\"EditableSpan_inputContainer__lMUS2\",\"sendButton\":\"EditableSpan_sendButton__jrOoo\",\"userName\":\"EditableSpan_userName__9F7r3\",\"marker\":\"EditableSpan_marker__cqa21\",\"errorButton\":\"EditableSpan_errorButton__sIari\",\"animateErrorButton\":\"EditableSpan_animateErrorButton__tZoUq\"};","import * as React from 'react'\r\n\r\nimport { BorderColor, Send } from '@mui/icons-material'\r\n\r\nimport { useAppSelector } from '../../../hooks/reduxHooks'\r\nimport { CustomInput } from '../CustomInput/CustomInput'\r\n\r\nimport s from './EditableSpan.module.scss'\r\n\r\ntype EditableSpanType = {\r\n  changeName: (name: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanType> = React.memo(({ changeName }) => {\r\n  const name = useAppSelector(state => state.profile.userData.name)\r\n  const [inputValue, setInputValue] = React.useState(name)\r\n  const [isInEditMode, setIsInEditMode] = React.useState(false)\r\n  const [errorEmptyField, setErrorEmptyField] = React.useState(false)\r\n  const [errorStyleButton, setErrorStyleButton] = React.useState('')\r\n\r\n  const handleAnimationEndError = () => {\r\n    setErrorStyleButton('')\r\n  }\r\n\r\n  const handleErrorSetNewName = () => {\r\n    if (errorEmptyField) {\r\n      setErrorStyleButton(s.errorButton)\r\n    }\r\n  }\r\n\r\n  const handleEditMode = () => {\r\n    setInputValue(inputValue.trim())\r\n    setIsInEditMode(true)\r\n  }\r\n\r\n  const handleSetNewName = () => {\r\n    if (inputValue.trim() === '') {\r\n      setErrorEmptyField(true)\r\n\r\n      return\r\n    }\r\n\r\n    if (inputValue.trim() !== name) {\r\n      changeName(inputValue.trim())\r\n    }\r\n\r\n    setIsInEditMode(false)\r\n  }\r\n\r\n  const onChangeInputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.currentTarget.value.trim() !== '') {\r\n      setErrorEmptyField(false)\r\n    }\r\n    setInputValue(e.currentTarget.value)\r\n  }\r\n\r\n  const onBlurInput = (e?: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    if (inputValue.trim() === '') {\r\n      e?.preventDefault()\r\n      setErrorEmptyField(true)\r\n\r\n      return\r\n    }\r\n\r\n    setInputValue(name)\r\n    setIsInEditMode(false)\r\n    setErrorEmptyField(false)\r\n  }\r\n\r\n  const onKeyDownInputHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      handleSetNewName()\r\n    }\r\n\r\n    if (e.key === 'Escape') {\r\n      onBlurInput()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isInEditMode ? (\r\n        <div className={s.inputContainer}>\r\n          <CustomInput\r\n            value={inputValue}\r\n            onBlur={onBlurInput}\r\n            onKeyDown={onKeyDownInputHandler}\r\n            onChange={onChangeInputHandler}\r\n            autoFocus={true}\r\n            autoComplete={'new-password'}\r\n            error={errorEmptyField}\r\n            InputProps={{\r\n              inputProps: { style: { textAlign: 'center' } },\r\n            }}\r\n          />\r\n          <Send\r\n            className={`${s.sendButton} ${errorStyleButton}`}\r\n            onMouseDown={handleSetNewName}\r\n            onClick={handleErrorSetNewName}\r\n            onAnimationEnd={handleAnimationEndError}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <span className={s.userName}>\r\n          {name}\r\n          <BorderColor className={s.marker} onClick={handleEditMode} />\r\n        </span>\r\n      )}\r\n    </>\r\n  )\r\n})\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profileContainer\":\"Profile_profileContainer__VNrHG\",\"profile__content\":\"Profile_profile__content__xZ49v\",\"profile__linkPacks\":\"Profile_profile__linkPacks__4QeLM\",\"profile__arrow\":\"Profile_profile__arrow__v9ws9\",\"profile__title\":\"Profile_profile__title__2YhVv\",\"profile__form\":\"Profile_profile__form__vTp8B\",\"profile__avatarBlock\":\"Profile_profile__avatarBlock__bobou\",\"profile__pic\":\"Profile_profile__pic__Iooyr\",\"profile__img\":\"Profile_profile__img__-of7+\",\"profile__avatarIcon\":\"Profile_profile__avatarIcon__Ygsj7\",\"profile__userName\":\"Profile_profile__userName__ewB6S\",\"profile__marker\":\"Profile_profile__marker__1kbw4\",\"profile__userEmail\":\"Profile_profile__userEmail__7uOy4\",\"profile__button\":\"Profile_profile__button__wQrHD\",\"profile__buttonIcon\":\"Profile_profile__buttonIcon__6ozQW\"};","import * as React from 'react'\r\n\r\nimport { CameraAlt } from '@mui/icons-material'\r\n\r\nimport avatarLocal from '../../assets/img/avatar.jpg'\r\nimport logout from '../../assets/img/icons/logout.svg'\r\nimport { BackToPacks } from '../../common/components/BackToPacks/BackToPacks'\r\nimport { CustomButton } from '../../common/components/CustomButton/CustomButton'\r\nimport { EditableSpan } from '../../common/components/EditableSpan/EditableSpan'\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/reduxHooks'\r\nimport { logOutTC } from '../auth/authSlice'\r\n\r\nimport s from './Profile.module.scss'\r\nimport { newUserDataTC } from './profileSlice'\r\n\r\nexport const Profile = () => {\r\n  const dispatch = useAppDispatch()\r\n  const email = useAppSelector(state => state.profile.userData.email)\r\n  const avatar = useAppSelector(state => state.profile.userData.avatar)\r\n\r\n  const onLogOutHandler = () => {\r\n    dispatch(logOutTC())\r\n  }\r\n\r\n  const setNewAvatar = () => alert('add photo')\r\n\r\n  const changeUserName = React.useCallback(\r\n    (newName: string) => {\r\n      dispatch(newUserDataTC({ name: newName, avatar }))\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <div className={s.profileContainer}>\r\n        <BackToPacks />\r\n        <div className={s.profile__content}>\r\n          <h2 className={s.profile__title}>personal information</h2>\r\n          <div className={s.profile__avatarBlock} onClick={setNewAvatar}>\r\n            <div className={s.profile__pic}>\r\n              <img className={s.profile__img} src={avatarLocal || avatar} alt=\"avatar\" />\r\n            </div>\r\n            <CameraAlt className={s.profile__avatarIcon} />\r\n          </div>\r\n          <div className={s.profile__userName}>\r\n            <EditableSpan changeName={changeUserName} />\r\n          </div>\r\n          <p className={s.profile__userEmail}>{email}</p>\r\n          <CustomButton className={s.profile__button} onClick={onLogOutHandler}>\r\n            <img className={s.profile__buttonIcon} src={logout} alt=\"logout\" />\r\n            <p>log out</p>\r\n          </CustomButton>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n"],"names":["CustomInput","className","helperText","props","finalClass","s","errorText","TextField","variant","type","fullWidth","createSvgIcon","_jsx","cx","cy","r","d","EditableSpan","React","changeName","name","useAppSelector","state","profile","userData","inputValue","setInputValue","isInEditMode","setIsInEditMode","errorEmptyField","setErrorEmptyField","errorStyleButton","setErrorStyleButton","handleSetNewName","trim","onBlurInput","e","preventDefault","value","onBlur","onKeyDown","key","onChange","currentTarget","autoFocus","autoComplete","error","InputProps","inputProps","style","textAlign","Send","onMouseDown","onClick","onAnimationEnd","BorderColor","Profile","dispatch","useAppDispatch","email","avatar","changeUserName","newName","newUserDataTC","BackToPacks","alert","src","avatarLocal","alt","CameraAlt","CustomButton","logOutTC","logout"],"sourceRoot":""}