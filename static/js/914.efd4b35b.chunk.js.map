{"version":3,"file":"static/js/914.efd4b35b.chunk.js","mappings":"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","sources":["webpack://cards/./src/common/components/CustomInput/CustomInput.module.scss?ad3d","common/components/CustomInput/CustomInput.tsx","common/components/CustomPasswordInput/CustomPasswordInput.tsx","webpack://cards/./src/features/auth/NewPassword/NewPassword.module.scss?227a","features/auth/NewPassword/NewPassword.tsx","utils/validationSchema.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"CustomInput_input__4vgJw\"};","import { FC } from 'react'\r\n\r\nimport { TextField, TextFieldProps } from '@mui/material'\r\n\r\nimport s from './CustomInput.module.scss'\r\n\r\ntype CustomInputPropsType = TextFieldProps & {\r\n  value: string //Use our value to control input and also because value in MUI has unknown type\r\n}\r\n\r\nexport const CustomInput: FC<CustomInputPropsType> = ({ className, helperText, ...props }) => {\r\n  const finalClass = `${s.input} ${className ? className : ''}`\r\n  const errorText = helperText || ' '\r\n\r\n  return (\r\n    <TextField\r\n      className={finalClass}\r\n      variant={props.variant || 'standard'}\r\n      type={props.type || 'text'}\r\n      fullWidth={props.fullWidth || true}\r\n      {...props}\r\n      helperText={errorText}\r\n    />\r\n  )\r\n}\r\n","import { useState, FC } from 'react'\r\n\r\nimport Visibility from '@mui/icons-material/Visibility'\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff'\r\nimport { IconButton, InputAdornment, TextFieldProps } from '@mui/material'\r\n\r\nimport { CustomInput } from '../CustomInput/CustomInput'\r\n\r\ntype CustomPasswordInputPropsType = TextFieldProps & {\r\n  value: string //Use our value to control input and also because value in MUI has unknown type\r\n}\r\n\r\nexport const CustomPasswordInput: FC<CustomPasswordInputPropsType> = ({\r\n  value,\r\n  type,\r\n  ...props\r\n}) => {\r\n  const [showPassword, setShowPassword] = useState(false)\r\n\r\n  const handleClickShowPassword = () => setShowPassword(!showPassword)\r\n\r\n  return (\r\n    <CustomInput\r\n      type={showPassword ? 'text' : 'password'}\r\n      value={value}\r\n      InputProps={{\r\n        endAdornment: (\r\n          <InputAdornment position={'end'}>\r\n            {value && (\r\n              <IconButton aria-label=\"toggle password visibility\" onClick={handleClickShowPassword}>\r\n                {showPassword ? <VisibilityOff /> : <Visibility />}\r\n              </IconButton>\r\n            )}\r\n          </InputAdornment>\r\n        ),\r\n      }}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"setPasswordContainer\":\"NewPassword_setPasswordContainer__qtDBe\",\"setPassword__form\":\"NewPassword_setPassword__form__5kIBB\",\"setPassword__title\":\"NewPassword_setPassword__title__64zn4\",\"setPassword__text\":\"NewPassword_setPassword__text__J8s8d\"};","import { useEffect } from 'react'\r\n\r\nimport { useFormik } from 'formik'\r\nimport { useNavigate, useParams } from 'react-router'\r\n\r\nimport { CustomButton } from '../../../common/components/CustomButton/CustomButton'\r\nimport { CustomPasswordInput } from '../../../common/components/CustomPasswordInput/CustomPasswordInput'\r\nimport { PATH } from '../../../constants/routePaths.enum'\r\nimport { useAppDispatch } from '../../../hooks/useAppDispatch'\r\nimport { useAppSelector } from '../../../hooks/useAppSelector'\r\nimport { newPassword } from '../../../utils/validationSchema'\r\nimport { createPasswordTC } from '../authSlice'\r\n\r\nimport s from './NewPassword.module.scss'\r\n\r\nexport const NewPassword = () => {\r\n  const navigate = useNavigate()\r\n  const dispatch = useAppDispatch()\r\n  const { token } = useParams()\r\n  const passwordIsChanged = useAppSelector(state => state.auth.passwordIsChanged)\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      password: '',\r\n    },\r\n    validationSchema: newPassword,\r\n    onSubmit: values => {\r\n      // console.log(token)\r\n      dispatch(createPasswordTC({ password: values.password, resetPasswordToken: token! }))\r\n    },\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (passwordIsChanged) {\r\n      formik.resetForm()\r\n      navigate(PATH.LOGIN)\r\n    }\r\n  }, [passwordIsChanged])\r\n\r\n  return (\r\n    <div className={s.setPasswordContainer}>\r\n      <h2 className={s.setPassword__title}>Create new password</h2>\r\n      <form className={s.setPassword__form} onSubmit={formik.handleSubmit}>\r\n        <CustomPasswordInput\r\n          label=\"Password\"\r\n          error={formik.touched.password && !!formik.errors.password}\r\n          helperText={formik.touched.password && formik.errors.password}\r\n          {...formik.getFieldProps('password')}\r\n        />\r\n        <p className={s.setPassword__text}>\r\n          Create new password and we will send you further instructions to email\r\n        </p>\r\n        <CustomButton>\r\n          <p>Create new password</p>\r\n        </CustomButton>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","import * as yup from 'yup'\r\n\r\nconst email = yup\r\n  .string()\r\n  .email('Enter a valid email')\r\n  .max(50, 'Enter a valid email')\r\n  .required('Email is required')\r\nconst password = yup\r\n  .string()\r\n  .min(8, 'Password must contain at least 8 characters')\r\n  .max(30, 'Password is too long')\r\n  .required('Enter your password')\r\nconst confirmPassword = yup\r\n  .string()\r\n  .oneOf([yup.ref('password')], 'Password does not match')\r\n  .required('Confirm your password')\r\nconst rememberMe = yup.boolean()\r\nconst question = yup\r\n  .string()\r\n  .max(100, 'Question should be less then 100 characters')\r\n  .required('Question is required')\r\nconst answer = yup\r\n  .string()\r\n  .max(100, 'Answer should be less then 100 characters')\r\n  .required('Answer is required')\r\nconst packName = yup\r\n  .string()\r\n  .max(100, 'Name should be less then 100 characters')\r\n  .required('Pack name is required')\r\n\r\nexport const login = yup.object({ email, password, rememberMe })\r\n\r\nexport const registration = yup.object({ email, password, confirmPassword })\r\n\r\nexport const newPassword = yup.object({ password })\r\n\r\nexport const forgotPassword = yup.object({ email })\r\n\r\nexport const newCardText = yup.object({ question, answer })\r\n\r\nexport const newPackText = yup.object({ name: packName })\r\n\r\nexport const validateImage = (imgData: ValidateImageType) => {\r\n  const formats = ['image/jpeg', 'image/png', 'image/jpg', 'image/gif', 'image/webp', 'image/svg']\r\n  const error: { questionImg?: string; deckCover?: string } = {}\r\n\r\n  if (imgData.selectedItem && !imgData.size && !imgData.isImageExist) {\r\n    error.questionImg = 'Question image is required'\r\n\r\n    return error\r\n  }\r\n\r\n  if (imgData.type && !new RegExp(imgData.type, 'gi').test(formats.join(','))) {\r\n    error.questionImg = 'Unsupported file format'\r\n    error.deckCover = 'Unsupported file format'\r\n\r\n    return error\r\n  }\r\n\r\n  if (imgData.size && imgData.size > 100000) {\r\n    error.questionImg = 'File size is more than 100kb'\r\n    error.deckCover = 'File size is more than 100kb'\r\n\r\n    return error\r\n  }\r\n\r\n  return error\r\n}\r\n\r\ntype ValidateImageType = {\r\n  size: number\r\n  type: string\r\n  selectedItem?: boolean\r\n  isImageExist: boolean\r\n}\r\n"],"names":["CustomInput","className","helperText","props","finalClass","s","errorText","TextField","variant","type","fullWidth","CustomPasswordInput","value","useState","showPassword","setShowPassword","InputProps","endAdornment","position","onClick","NewPassword","navigate","useNavigate","dispatch","useAppDispatch","token","useParams","passwordIsChanged","useAppSelector","state","auth","formik","useFormik","initialValues","password","validationSchema","newPassword","onSubmit","values","createPasswordTC","resetPasswordToken","useEffect","resetForm","PATH","handleSubmit","label","error","touched","errors","getFieldProps","CustomButton","email","yup","max","required","min","confirmPassword","oneOf","rememberMe","question","answer","packName","login","registration","forgotPassword","newCardText","newPackText","name","validateImage","imgData","selectedItem","size","isImageExist","RegExp","test","join","questionImg","deckCover"],"sourceRoot":""}